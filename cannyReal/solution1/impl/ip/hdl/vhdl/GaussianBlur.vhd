-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GaussianBlur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifo1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo1_empty_n : IN STD_LOGIC;
    fifo1_read : OUT STD_LOGIC;
    fifo2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo2_full_n : IN STD_LOGIC;
    fifo2_write : OUT STD_LOGIC );
end;


architecture behav of GaussianBlur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifo1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln151_reg_1292 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo2_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln151_reg_1292_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_0_i_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln150_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yi_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_1287 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln151_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln151_reg_1292_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_fu_263_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal line_buf_addr_reg_1301 : STD_LOGIC_VECTOR (8 downto 0);
    signal window_buf_1_1_6_reg_1307 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_1_reg_1312 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_6_reg_1318 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_1_reg_1325 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_3_1_reg_1331 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_2_1_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln182_4_fu_504_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_4_reg_1343 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_11_fu_682_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln182_11_reg_1348 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln182_18_fu_718_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_18_reg_1353 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_22_fu_754_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln182_22_reg_1358 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln182_9_fu_1092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln182_9_reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln182_13_fu_1117_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln182_13_reg_1368 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln182_23_fu_1129_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln182_23_reg_1373 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal line_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC;
    signal line_buf_d1 : STD_LOGIC_VECTOR (39 downto 0);
    signal yi_0_i_reg_223 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln160_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buf_0_1_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_5_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_2_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_3_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_4_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_5_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_3_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_4_fu_341_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_5_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_3_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_4_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_1_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_1_1_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_2_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_3_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_3_4_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_4_1_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_4_1_1_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_4_2_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_4_3_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_371_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_394_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln182_fu_390_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_1_fu_402_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_fu_406_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln182_1_fu_416_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln182_2_fu_428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_3_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_4_fu_436_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln182_fu_440_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_2_fu_412_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln182_fu_446_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln182_1_fu_450_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_3_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln182_4_fu_476_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln182_5_fu_468_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln182_1_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_6_fu_472_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_7_fu_484_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_3_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_2_fu_488_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_8_fu_500_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln182_8_fu_510_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_9_fu_522_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln182_17_fu_534_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln182_18_fu_546_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_23_fu_542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_24_fu_554_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln182_5_fu_558_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_19_fu_568_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln182_20_fu_580_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_23_fu_592_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_24_fu_604_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln182_25_fu_620_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln182_26_fu_632_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln182_27_fu_644_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_33_fu_640_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_34_fu_652_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln182_7_fu_656_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_28_fu_666_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln182_10_fu_662_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln182_8_fu_564_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_26_fu_588_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_12_fu_518_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln182_15_fu_688_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_25_fu_576_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_13_fu_530_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_16_fu_698_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_29_fu_600_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_38_fu_704_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln182_17_fu_708_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_37_fu_694_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_39_fu_714_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_32_fu_628_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_30_fu_612_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_19_fu_724_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_36_fu_678_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_31_fu_616_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln182_20_fu_734_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_35_fu_674_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_42_fu_740_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln182_21_fu_744_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_41_fu_730_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_43_fu_750_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_5_fu_861_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_9_fu_868_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln182_2_fu_858_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln182_5_fu_872_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln182_6_fu_882_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_7_fu_893_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_10_fu_889_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_11_fu_900_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln182_1_fu_904_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln182_s_fu_914_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln182_10_fu_926_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln182_14_fu_922_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln182_15_fu_934_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln182_2_fu_938_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln182_11_fu_948_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_12_fu_959_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_16_fu_955_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_17_fu_966_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln182_3_fu_970_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln182_13_fu_980_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_14_fu_991_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln182_19_fu_998_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_18_fu_987_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_6_fu_1002_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln182_15_fu_1012_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_16_fu_1023_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_21_fu_1019_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_22_fu_1030_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln182_4_fu_1034_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln182_21_fu_1044_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln182_22_fu_1055_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln182_27_fu_1051_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_28_fu_1062_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln182_6_fu_1066_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln182_4_fu_910_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_3_fu_878_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_7_fu_1040_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln182_6_fu_976_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln182_8_fu_1082_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln182_7_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_11_fu_1088_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln182_20_fu_1008_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_9_fu_1072_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_5_fu_944_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln182_12_fu_1104_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_12_fu_1107_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln182_10_fu_1098_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln182_13_fu_1113_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln182_40_fu_1123_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln182_44_fu_1126_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln182_14_fu_1139_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln182_45_fu_1143_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln182_24_fu_1146_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component GaussianBlur_lineeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (39 downto 0) );
    end component;



begin
    line_buf_U : component GaussianBlur_lineeOg
    generic map (
        DataWidth => 40,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        q0 => line_buf_q0,
        address1 => line_buf_addr_reg_1301,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln150_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln151_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln150_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((icmp_ln150_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xi_0_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_0_i_reg_234 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                xi_0_i_reg_234 <= xi_fu_263_p2;
            end if; 
        end if;
    end process;

    yi_0_i_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                yi_0_i_reg_223 <= yi_reg_1287;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_0_i_reg_223 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln182_11_reg_1348(12 downto 1) <= add_ln182_11_fu_682_p2(12 downto 1);
                    add_ln182_18_reg_1353(13 downto 2) <= add_ln182_18_fu_718_p2(13 downto 2);
                add_ln182_22_reg_1358 <= add_ln182_22_fu_754_p2;
                add_ln182_4_reg_1343 <= add_ln182_4_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292_pp0_iter1_reg = ap_const_lv1_0))) then
                    add_ln182_13_reg_1368(15 downto 1) <= add_ln182_13_fu_1117_p2(15 downto 1);
                add_ln182_23_reg_1373 <= add_ln182_23_fu_1129_p2;
                add_ln182_9_reg_1363 <= add_ln182_9_fu_1092_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln151_reg_1292 <= icmp_ln151_fu_257_p2;
                icmp_ln151_reg_1292_pp0_iter1_reg <= icmp_ln151_reg_1292;
                window_buf_1_1_6_reg_1307 <= window_buf_1_1_5_fu_130;
                window_buf_1_2_1_reg_1312 <= window_buf_1_2_fu_134;
                window_buf_2_1_6_reg_1318 <= window_buf_2_1_5_fu_146;
                window_buf_2_2_1_reg_1325 <= window_buf_2_2_fu_150;
                window_buf_2_3_1_reg_1331 <= window_buf_2_3_fu_154;
                window_buf_3_2_1_reg_1337 <= window_buf_3_2_fu_166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln151_reg_1292_pp0_iter2_reg <= icmp_ln151_reg_1292_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buf_addr_reg_1301 <= zext_ln160_fu_269_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                window_buf_0_1_5_fu_114 <= window_buf_0_2_fu_118;
                window_buf_0_1_fu_110 <= window_buf_0_1_5_fu_114;
                window_buf_0_2_fu_118 <= window_buf_0_3_fu_122;
                window_buf_0_3_fu_122 <= line_buf_q0(15 downto 8);
                window_buf_1_1_5_fu_130 <= window_buf_1_2_fu_134;
                window_buf_1_1_fu_126 <= window_buf_1_1_5_fu_130;
                window_buf_1_2_fu_134 <= window_buf_1_3_fu_138;
                window_buf_1_3_fu_138 <= line_buf_q0(23 downto 16);
                window_buf_2_1_5_fu_146 <= window_buf_2_2_fu_150;
                window_buf_2_2_fu_150 <= window_buf_2_3_fu_154;
                window_buf_2_3_fu_154 <= line_buf_q0(31 downto 24);
                window_buf_3_1_1_fu_162 <= window_buf_3_2_fu_166;
                window_buf_3_1_fu_158 <= window_buf_3_1_1_fu_162;
                window_buf_3_2_fu_166 <= window_buf_3_3_fu_170;
                window_buf_3_3_fu_170 <= line_buf_q0(39 downto 32);
                window_buf_4_1_1_fu_178 <= window_buf_4_2_fu_182;
                window_buf_4_1_fu_174 <= window_buf_4_1_1_fu_178;
                window_buf_4_2_fu_182 <= window_buf_4_3_fu_186;
                window_buf_4_3_fu_186 <= fifo1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                window_buf_2_1_fu_142 <= window_buf_2_1_6_reg_1318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                yi_reg_1287 <= yi_fu_251_p2;
            end if;
        end if;
    end process;
    add_ln182_11_reg_1348(0) <= '0';
    add_ln182_18_reg_1353(1 downto 0) <= "00";
    add_ln182_13_reg_1368(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln150_fu_245_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln150_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln182_10_fu_1098_p2 <= std_logic_vector(unsigned(zext_ln182_20_fu_1008_p1) + unsigned(sext_ln182_9_fu_1072_p1));
    add_ln182_11_fu_682_p2 <= std_logic_vector(signed(sext_ln182_10_fu_662_p1) + signed(sext_ln182_8_fu_564_p1));
    add_ln182_12_fu_1107_p2 <= std_logic_vector(signed(sext_ln182_5_fu_944_p1) + signed(sext_ln182_12_fu_1104_p1));
    add_ln182_13_fu_1117_p2 <= std_logic_vector(unsigned(add_ln182_10_fu_1098_p2) + unsigned(sext_ln182_13_fu_1113_p1));
    add_ln182_14_fu_1139_p2 <= std_logic_vector(unsigned(add_ln182_9_reg_1363) + unsigned(add_ln182_13_reg_1368));
    add_ln182_15_fu_688_p2 <= std_logic_vector(unsigned(zext_ln182_26_fu_588_p1) + unsigned(zext_ln182_12_fu_518_p1));
    add_ln182_16_fu_698_p2 <= std_logic_vector(unsigned(zext_ln182_25_fu_576_p1) + unsigned(zext_ln182_13_fu_530_p1));
    add_ln182_17_fu_708_p2 <= std_logic_vector(unsigned(zext_ln182_29_fu_600_p1) + unsigned(zext_ln182_38_fu_704_p1));
    add_ln182_18_fu_718_p2 <= std_logic_vector(unsigned(zext_ln182_37_fu_694_p1) + unsigned(zext_ln182_39_fu_714_p1));
    add_ln182_19_fu_724_p2 <= std_logic_vector(unsigned(zext_ln182_32_fu_628_p1) + unsigned(zext_ln182_30_fu_612_p1));
    add_ln182_1_fu_450_p2 <= std_logic_vector(unsigned(zext_ln182_2_fu_412_p1) + unsigned(sext_ln182_fu_446_p1));
    add_ln182_20_fu_734_p2 <= std_logic_vector(unsigned(zext_ln182_36_fu_678_p1) + unsigned(zext_ln182_31_fu_616_p1));
    add_ln182_21_fu_744_p2 <= std_logic_vector(unsigned(zext_ln182_35_fu_674_p1) + unsigned(zext_ln182_42_fu_740_p1));
    add_ln182_22_fu_754_p2 <= std_logic_vector(unsigned(zext_ln182_41_fu_730_p1) + unsigned(zext_ln182_43_fu_750_p1));
    add_ln182_23_fu_1129_p2 <= std_logic_vector(unsigned(zext_ln182_40_fu_1123_p1) + unsigned(zext_ln182_44_fu_1126_p1));
    add_ln182_24_fu_1146_p2 <= std_logic_vector(unsigned(add_ln182_14_fu_1139_p2) + unsigned(zext_ln182_45_fu_1143_p1));
    add_ln182_2_fu_488_p2 <= std_logic_vector(unsigned(zext_ln182_5_fu_468_p1) + unsigned(sext_ln182_1_fu_456_p1));
    add_ln182_3_fu_494_p2 <= std_logic_vector(unsigned(zext_ln182_6_fu_472_p1) + unsigned(zext_ln182_7_fu_484_p1));
    add_ln182_4_fu_504_p2 <= std_logic_vector(unsigned(add_ln182_2_fu_488_p2) + unsigned(zext_ln182_8_fu_500_p1));
    add_ln182_5_fu_872_p2 <= std_logic_vector(unsigned(zext_ln182_9_fu_868_p1) + unsigned(sext_ln182_2_fu_858_p1));
    add_ln182_6_fu_1002_p2 <= std_logic_vector(unsigned(zext_ln182_19_fu_998_p1) + unsigned(zext_ln182_18_fu_987_p1));
    add_ln182_7_fu_1076_p2 <= std_logic_vector(signed(sext_ln182_4_fu_910_p1) + signed(sext_ln182_3_fu_878_p1));
    add_ln182_8_fu_1082_p2 <= std_logic_vector(signed(sext_ln182_7_fu_1040_p1) + signed(sext_ln182_6_fu_976_p1));
    add_ln182_9_fu_1092_p2 <= std_logic_vector(unsigned(add_ln182_7_fu_1076_p2) + unsigned(sext_ln182_11_fu_1088_p1));
    add_ln182_fu_406_p2 <= std_logic_vector(unsigned(zext_ln182_fu_390_p1) + unsigned(zext_ln182_1_fu_402_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo1_empty_n, fifo2_full_n, ap_enable_reg_pp0_iter1, icmp_ln151_reg_1292, ap_enable_reg_pp0_iter3, icmp_ln151_reg_1292_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (fifo2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln151_reg_1292 = ap_const_lv1_0) and (fifo1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo1_empty_n, fifo2_full_n, ap_enable_reg_pp0_iter1, icmp_ln151_reg_1292, ap_enable_reg_pp0_iter3, icmp_ln151_reg_1292_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (fifo2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln151_reg_1292 = ap_const_lv1_0) and (fifo1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo1_empty_n, fifo2_full_n, ap_enable_reg_pp0_iter1, icmp_ln151_reg_1292, ap_enable_reg_pp0_iter3, icmp_ln151_reg_1292_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (fifo2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln151_reg_1292 = ap_const_lv1_0) and (fifo1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo1_empty_n, icmp_ln151_reg_1292)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln151_reg_1292 = ap_const_lv1_0) and (fifo1_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(fifo2_full_n, icmp_ln151_reg_1292_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (fifo2_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln150_fu_245_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln150_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifo1_blk_n_assign_proc : process(fifo1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln151_reg_1292)
    begin
        if (((icmp_ln151_reg_1292 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo1_blk_n <= fifo1_empty_n;
        else 
            fifo1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln151_reg_1292, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo1_read <= ap_const_logic_1;
        else 
            fifo1_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo2_blk_n_assign_proc : process(fifo2_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln151_reg_1292_pp0_iter2_reg)
    begin
        if (((icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fifo2_blk_n <= fifo2_full_n;
        else 
            fifo2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo2_din <= add_ln182_24_fu_1146_p2(15 downto 8);

    fifo2_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln151_reg_1292_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fifo2_write <= ap_const_logic_1;
        else 
            fifo2_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln150_fu_245_p2 <= "1" when (yi_0_i_reg_223 = ap_const_lv10_200) else "0";
    icmp_ln151_fu_257_p2 <= "1" when (xi_0_i_reg_234 = ap_const_lv10_200) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln150_fu_245_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln150_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_address0 <= zext_ln160_fu_269_p1(9 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_d1 <= (fifo1_dout & tmp_fu_371_p4);

    line_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln151_reg_1292, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln151_reg_1292 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buf_we1 <= ap_const_logic_1;
        else 
            line_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln182_10_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_7_fu_656_p2),13));

        sext_ln182_11_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_8_fu_1082_p2),16));

        sext_ln182_12_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_11_reg_1348),14));

        sext_ln182_13_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_12_fu_1107_p2),16));

        sext_ln182_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_1_fu_450_p2),14));

        sext_ln182_2_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_4_reg_1343),15));

        sext_ln182_3_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln182_5_fu_872_p2),16));

        sext_ln182_4_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_1_fu_904_p2),16));

        sext_ln182_5_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_2_fu_938_p2),14));

        sext_ln182_6_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_3_fu_970_p2),15));

        sext_ln182_7_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_4_fu_1034_p2),15));

        sext_ln182_8_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_5_fu_558_p2),13));

        sext_ln182_9_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_6_fu_1066_p2),16));

        sext_ln182_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln182_fu_440_p2),13));

    shl_ln182_10_fu_926_p3 <= (window_buf_2_1_fu_142 & ap_const_lv1_0);
    shl_ln182_11_fu_948_p3 <= (window_buf_2_1_6_reg_1318 & ap_const_lv5_0);
    shl_ln182_12_fu_959_p3 <= (window_buf_2_1_6_reg_1318 & ap_const_lv3_0);
    shl_ln182_13_fu_980_p3 <= (window_buf_2_2_1_reg_1325 & ap_const_lv5_0);
    shl_ln182_14_fu_991_p3 <= (window_buf_2_2_1_reg_1325 & ap_const_lv2_0);
    shl_ln182_15_fu_1012_p3 <= (window_buf_2_3_1_reg_1331 & ap_const_lv5_0);
    shl_ln182_16_fu_1023_p3 <= (window_buf_2_3_1_reg_1331 & ap_const_lv3_0);
    shl_ln182_17_fu_534_p3 <= (window_buf_2_4_fu_351_p4 & ap_const_lv3_0);
    shl_ln182_18_fu_546_p3 <= (window_buf_2_4_fu_351_p4 & ap_const_lv1_0);
    shl_ln182_19_fu_568_p3 <= (window_buf_3_1_fu_158 & ap_const_lv2_0);
    shl_ln182_1_fu_416_p3 <= (window_buf_0_2_fu_118 & ap_const_lv3_0);
    shl_ln182_20_fu_580_p3 <= (window_buf_3_1_1_fu_162 & ap_const_lv4_0);
    shl_ln182_21_fu_1044_p3 <= (window_buf_3_2_1_reg_1337 & ap_const_lv5_0);
    shl_ln182_22_fu_1055_p3 <= (window_buf_3_2_1_reg_1337 & ap_const_lv3_0);
    shl_ln182_23_fu_592_p3 <= (window_buf_3_3_fu_170 & ap_const_lv4_0);
    shl_ln182_24_fu_604_p3 <= (window_buf_3_4_fu_361_p4 & ap_const_lv2_0);
    shl_ln182_25_fu_620_p3 <= (window_buf_4_1_1_fu_178 & ap_const_lv2_0);
    shl_ln182_26_fu_632_p3 <= (window_buf_4_2_fu_182 & ap_const_lv3_0);
    shl_ln182_27_fu_644_p3 <= (window_buf_4_2_fu_182 & ap_const_lv1_0);
    shl_ln182_28_fu_666_p3 <= (window_buf_4_3_fu_186 & ap_const_lv2_0);
    shl_ln182_2_fu_428_p3 <= (window_buf_0_2_fu_118 & ap_const_lv1_0);
    shl_ln182_3_fu_460_p3 <= (window_buf_0_3_fu_122 & ap_const_lv2_0);
    shl_ln182_4_fu_476_p3 <= (window_buf_1_1_fu_126 & ap_const_lv2_0);
    shl_ln182_5_fu_861_p3 <= (window_buf_1_1_6_reg_1307 & ap_const_lv4_0);
    shl_ln182_6_fu_882_p3 <= (window_buf_1_2_1_reg_1312 & ap_const_lv5_0);
    shl_ln182_7_fu_893_p3 <= (window_buf_1_2_1_reg_1312 & ap_const_lv3_0);
    shl_ln182_8_fu_510_p3 <= (window_buf_1_3_fu_138 & ap_const_lv4_0);
    shl_ln182_9_fu_522_p3 <= (window_buf_1_4_fu_341_p4 & ap_const_lv2_0);
    shl_ln182_s_fu_914_p3 <= (window_buf_2_1_fu_142 & ap_const_lv3_0);
    shl_ln_fu_394_p3 <= (window_buf_0_1_5_fu_114 & ap_const_lv2_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln182_1_fu_904_p2 <= std_logic_vector(unsigned(zext_ln182_10_fu_889_p1) - unsigned(zext_ln182_11_fu_900_p1));
    sub_ln182_2_fu_938_p2 <= std_logic_vector(unsigned(zext_ln182_14_fu_922_p1) - unsigned(zext_ln182_15_fu_934_p1));
    sub_ln182_3_fu_970_p2 <= std_logic_vector(unsigned(zext_ln182_16_fu_955_p1) - unsigned(zext_ln182_17_fu_966_p1));
    sub_ln182_4_fu_1034_p2 <= std_logic_vector(unsigned(zext_ln182_21_fu_1019_p1) - unsigned(zext_ln182_22_fu_1030_p1));
    sub_ln182_5_fu_558_p2 <= std_logic_vector(unsigned(zext_ln182_23_fu_542_p1) - unsigned(zext_ln182_24_fu_554_p1));
    sub_ln182_6_fu_1066_p2 <= std_logic_vector(unsigned(zext_ln182_27_fu_1051_p1) - unsigned(zext_ln182_28_fu_1062_p1));
    sub_ln182_7_fu_656_p2 <= std_logic_vector(unsigned(zext_ln182_33_fu_640_p1) - unsigned(zext_ln182_34_fu_652_p1));
    sub_ln182_fu_440_p2 <= std_logic_vector(unsigned(zext_ln182_3_fu_424_p1) - unsigned(zext_ln182_4_fu_436_p1));
    tmp_fu_371_p4 <= line_buf_q0(39 downto 8);
    window_buf_0_4_fu_331_p4 <= line_buf_q0(15 downto 8);
    window_buf_1_4_fu_341_p4 <= line_buf_q0(23 downto 16);
    window_buf_2_4_fu_351_p4 <= line_buf_q0(31 downto 24);
    window_buf_3_4_fu_361_p4 <= line_buf_q0(39 downto 32);
    xi_fu_263_p2 <= std_logic_vector(unsigned(xi_0_i_reg_234) + unsigned(ap_const_lv10_1));
    yi_fu_251_p2 <= std_logic_vector(unsigned(yi_0_i_reg_223) + unsigned(ap_const_lv10_1));
    zext_ln160_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_0_i_reg_234),64));
    zext_ln182_10_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_6_fu_882_p3),14));
    zext_ln182_11_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_7_fu_893_p3),14));
    zext_ln182_12_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_8_fu_510_p3),13));
    zext_ln182_13_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_9_fu_522_p3),11));
    zext_ln182_14_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_s_fu_914_p3),12));
    zext_ln182_15_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_10_fu_926_p3),12));
    zext_ln182_16_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_11_fu_948_p3),14));
    zext_ln182_17_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_12_fu_959_p3),14));
    zext_ln182_18_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_13_fu_980_p3),14));
    zext_ln182_19_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_14_fu_991_p3),14));
    zext_ln182_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_394_p3),11));
    zext_ln182_20_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_6_fu_1002_p2),16));
    zext_ln182_21_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_15_fu_1012_p3),14));
    zext_ln182_22_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_16_fu_1023_p3),14));
    zext_ln182_23_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_17_fu_534_p3),12));
    zext_ln182_24_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_18_fu_546_p3),12));
    zext_ln182_25_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_19_fu_568_p3),11));
    zext_ln182_26_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_20_fu_580_p3),13));
    zext_ln182_27_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_21_fu_1044_p3),14));
    zext_ln182_28_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_22_fu_1055_p3),14));
    zext_ln182_29_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_23_fu_592_p3),13));
    zext_ln182_2_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_fu_406_p2),13));
    zext_ln182_30_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_24_fu_604_p3),11));
    zext_ln182_31_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_4_1_fu_174),9));
    zext_ln182_32_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_25_fu_620_p3),11));
    zext_ln182_33_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_26_fu_632_p3),12));
    zext_ln182_34_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_27_fu_644_p3),12));
    zext_ln182_35_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_28_fu_666_p3),11));
    zext_ln182_36_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fifo1_dout),9));
    zext_ln182_37_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_15_fu_688_p2),14));
    zext_ln182_38_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_16_fu_698_p2),13));
    zext_ln182_39_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_17_fu_708_p2),14));
    zext_ln182_3_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_1_fu_416_p3),12));
    zext_ln182_40_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_18_reg_1353),15));
    zext_ln182_41_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_19_fu_724_p2),12));
    zext_ln182_42_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_20_fu_734_p2),11));
    zext_ln182_43_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_21_fu_744_p2),12));
    zext_ln182_44_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_22_reg_1358),15));
    zext_ln182_45_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_23_reg_1373),16));
    zext_ln182_4_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_2_fu_428_p3),12));
    zext_ln182_5_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_3_fu_460_p3),14));
    zext_ln182_6_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_4_fu_331_p4),11));
    zext_ln182_7_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_4_fu_476_p3),11));
    zext_ln182_8_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_3_fu_494_p2),14));
    zext_ln182_9_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln182_5_fu_861_p3),15));
    zext_ln182_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_1_fu_110),11));
end behav;
