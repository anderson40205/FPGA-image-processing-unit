-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NonMaxSuppression is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifo3_value_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo3_value_empty_n : IN STD_LOGIC;
    fifo3_value_read : OUT STD_LOGIC;
    fifo3_grad_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    fifo3_grad_empty_n : IN STD_LOGIC;
    fifo3_grad_read : OUT STD_LOGIC;
    fifo4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo4_full_n : IN STD_LOGIC;
    fifo4_write : OUT STD_LOGIC );
end;


architecture behav of NonMaxSuppression is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1FD : STD_LOGIC_VECTOR (9 downto 0) := "0111111101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifo3_value_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln324_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo3_grad_blk_n : STD_LOGIC;
    signal fifo4_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln324_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_0_i_reg_222 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln323_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yi_fu_239_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal yi_reg_698 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln382_1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln382_1_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln324_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xi_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal line_buf_value_addr_reg_717 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_grad_addr_reg_723 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln382_2_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_2_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_2_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_3_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_3_reg_734_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal window_buf_1_1_val_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln368_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln375_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln375_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln360_fu_556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln360_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln374_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln374_reg_759 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal line_buf_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_value_ce0 : STD_LOGIC;
    signal line_buf_value_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_value_ce1 : STD_LOGIC;
    signal line_buf_value_we1 : STD_LOGIC;
    signal line_buf_value_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_grad_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal line_buf_grad_ce0 : STD_LOGIC;
    signal line_buf_grad_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buf_grad_ce1 : STD_LOGIC;
    signal line_buf_grad_we1 : STD_LOGIC;
    signal line_buf_grad_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal yi_0_i_reg_211 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln334_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buf_0_1_val_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_val_1_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_2_val_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal value_nms_1_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_val_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_val_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_val_1_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_nms_fu_148 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_8_fu_245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln382_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln382_1_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_291_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_364_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_383_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln354_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln354_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln354_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln361_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln361_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln361_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln368_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln360_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln360_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln360_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln367_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_fu_490_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln354_fu_426_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln367_fu_528_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln353_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln360_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln361_fu_458_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln353_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln367_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln374_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln367_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln375_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln375_fu_621_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln382_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln382_2_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln374_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Sobel_512u_512u_sfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component NonMaxSuppressionmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    line_buf_value_U : component Sobel_512u_512u_sfYi
    generic map (
        DataWidth => 24,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_value_address0,
        ce0 => line_buf_value_ce0,
        q0 => line_buf_value_q0,
        address1 => line_buf_value_addr_reg_717,
        ce1 => line_buf_value_ce1,
        we1 => line_buf_value_we1,
        d1 => line_buf_value_d1);

    line_buf_grad_U : component NonMaxSuppressionmb6
    generic map (
        DataWidth => 6,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_grad_address0,
        ce0 => line_buf_grad_ce0,
        q0 => line_buf_grad_q0,
        address1 => line_buf_grad_addr_reg_723,
        ce1 => line_buf_grad_ce1,
        we1 => line_buf_grad_we1,
        d1 => line_buf_grad_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln323_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln324_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln323_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((icmp_ln323_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln323_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xi_0_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln324_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                xi_0_i_reg_222 <= xi_fu_279_p2;
            elsif (((icmp_ln323_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_0_i_reg_222 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    yi_0_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_0_i_reg_211 <= yi_reg_698;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_0_i_reg_211 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln374_reg_759 <= and_ln374_fu_576_p2;
                icmp_ln368_reg_744 <= icmp_ln368_fu_472_p2;
                icmp_ln375_reg_749 <= icmp_ln375_fu_504_p2;
                select_ln360_reg_754 <= select_ln360_fu_556_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln323_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln382_1_reg_703 <= and_ln382_1_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                grad_nms_fu_148 <= line_buf_grad_q0(5 downto 4);
                value_nms_1_fu_136 <= line_buf_value_q0(23 downto 16);
                value_nms_fu_132 <= value_nms_1_fu_136;
                window_buf_0_1_val_1_fu_128 <= line_buf_value_q0(15 downto 8);
                window_buf_0_1_val_fu_124 <= window_buf_0_1_val_1_fu_128;
                window_buf_2_1_val_1_fu_144 <= fifo3_value_dout;
                window_buf_2_1_val_fu_140 <= window_buf_2_1_val_1_fu_144;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln324_reg_708 <= icmp_ln324_fu_273_p2;
                icmp_ln324_reg_708_pp0_iter1_reg <= icmp_ln324_reg_708;
                icmp_ln382_2_reg_729_pp0_iter1_reg <= icmp_ln382_2_reg_729;
                icmp_ln382_3_reg_734_pp0_iter1_reg <= icmp_ln382_3_reg_734;
                window_buf_1_1_val_reg_739 <= value_nms_1_fu_136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln324_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln382_2_reg_729 <= icmp_ln382_2_fu_301_p2;
                icmp_ln382_3_reg_734 <= icmp_ln382_3_fu_307_p2;
                line_buf_grad_addr_reg_723 <= zext_ln334_fu_285_p1(9 - 1 downto 0);
                line_buf_value_addr_reg_717 <= zext_ln334_fu_285_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                yi_reg_698 <= yi_fu_239_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln323_fu_233_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln323_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln360_fu_550_p2 <= (xor_ln353_fu_544_p2 and icmp_ln360_fu_434_p2);
    and_ln367_fu_522_p2 <= (xor_ln360_fu_516_p2 and icmp_ln367_fu_466_p2);
    and_ln374_fu_576_p2 <= (xor_ln367_fu_570_p2 and icmp_ln374_fu_498_p2);
    and_ln382_1_fu_267_p2 <= (icmp_ln382_fu_255_p2 and icmp_ln382_1_fu_261_p2);
    and_ln382_2_fu_638_p2 <= (and_ln382_fu_634_p2 and and_ln382_1_reg_703);
    and_ln382_fu_634_p2 <= (icmp_ln382_3_reg_734_pp0_iter1_reg and icmp_ln382_2_reg_729_pp0_iter1_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo3_value_empty_n, fifo3_grad_empty_n, fifo4_full_n, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_enable_reg_pp0_iter2, icmp_ln324_reg_708_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (fifo4_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_grad_empty_n = ap_const_logic_0)) or ((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_value_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo3_value_empty_n, fifo3_grad_empty_n, fifo4_full_n, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_enable_reg_pp0_iter2, icmp_ln324_reg_708_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (fifo4_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_grad_empty_n = ap_const_logic_0)) or ((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_value_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo3_value_empty_n, fifo3_grad_empty_n, fifo4_full_n, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_enable_reg_pp0_iter2, icmp_ln324_reg_708_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (fifo4_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_grad_empty_n = ap_const_logic_0)) or ((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_value_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo3_value_empty_n, fifo3_grad_empty_n, icmp_ln324_reg_708)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_grad_empty_n = ap_const_logic_0)) or ((icmp_ln324_reg_708 = ap_const_lv1_0) and (fifo3_value_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(fifo4_full_n, icmp_ln324_reg_708_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (fifo4_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln323_fu_233_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln323_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifo3_grad_blk_n_assign_proc : process(fifo3_grad_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln324_reg_708)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo3_grad_blk_n <= fifo3_grad_empty_n;
        else 
            fifo3_grad_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo3_grad_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo3_grad_read <= ap_const_logic_1;
        else 
            fifo3_grad_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo3_value_blk_n_assign_proc : process(fifo3_value_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln324_reg_708)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo3_value_blk_n <= fifo3_value_empty_n;
        else 
            fifo3_value_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo3_value_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo3_value_read <= ap_const_logic_1;
        else 
            fifo3_value_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo4_blk_n_assign_proc : process(fifo4_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln324_reg_708_pp0_iter1_reg)
    begin
        if (((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo4_blk_n <= fifo4_full_n;
        else 
            fifo4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo4_din <= 
        select_ln374_fu_628_p3 when (and_ln382_2_fu_638_p2(0) = '1') else 
        ap_const_lv8_0;

    fifo4_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln324_reg_708_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln324_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo4_write <= ap_const_logic_1;
        else 
            fifo4_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln323_fu_233_p2 <= "1" when (yi_0_i_reg_211 = ap_const_lv10_200) else "0";
    icmp_ln324_fu_273_p2 <= "1" when (xi_0_i_reg_222 = ap_const_lv10_200) else "0";
    icmp_ln353_fu_402_p2 <= "1" when (grad_nms_fu_148 = ap_const_lv2_0) else "0";
    icmp_ln354_1_fu_414_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(window_buf_1_2_val_fu_344_p4)) else "0";
    icmp_ln354_fu_408_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(value_nms_fu_132)) else "0";
    icmp_ln360_fu_434_p2 <= "1" when (grad_nms_fu_148 = ap_const_lv2_1) else "0";
    icmp_ln361_1_fu_446_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(fifo3_value_dout)) else "0";
    icmp_ln361_fu_440_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(window_buf_0_1_val_fu_124)) else "0";
    icmp_ln367_fu_466_p2 <= "1" when (grad_nms_fu_148 = ap_const_lv2_2) else "0";
    icmp_ln368_1_fu_478_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(window_buf_2_1_val_1_fu_144)) else "0";
    icmp_ln368_fu_472_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(window_buf_0_2_val_fu_334_p4)) else "0";
    icmp_ln374_fu_498_p2 <= "1" when (grad_nms_fu_148 = ap_const_lv2_3) else "0";
    icmp_ln375_fu_504_p2 <= "1" when (unsigned(value_nms_1_fu_136) < unsigned(window_buf_2_1_val_fu_140)) else "0";
    icmp_ln382_1_fu_261_p2 <= "1" when (unsigned(yi_0_i_reg_211) < unsigned(ap_const_lv10_1FD)) else "0";
    icmp_ln382_2_fu_301_p2 <= "0" when (tmp_9_fu_291_p4 = ap_const_lv8_0) else "1";
    icmp_ln382_3_fu_307_p2 <= "1" when (unsigned(xi_0_i_reg_222) < unsigned(ap_const_lv10_1FD)) else "0";
    icmp_ln382_fu_255_p2 <= "0" when (tmp_8_fu_245_p4 = ap_const_lv8_0) else "1";

    internal_ap_ready_assign_proc : process(icmp_ln323_fu_233_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln323_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_grad_address0 <= zext_ln334_fu_285_p1(9 - 1 downto 0);

    line_buf_grad_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_grad_ce0 <= ap_const_logic_1;
        else 
            line_buf_grad_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_grad_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_grad_ce1 <= ap_const_logic_1;
        else 
            line_buf_grad_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_grad_d1 <= (fifo3_grad_dout & tmp_1_fu_383_p4);

    line_buf_grad_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_grad_we1 <= ap_const_logic_1;
        else 
            line_buf_grad_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_value_address0 <= zext_ln334_fu_285_p1(9 - 1 downto 0);

    line_buf_value_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_value_ce0 <= ap_const_logic_1;
        else 
            line_buf_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_value_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_value_ce1 <= ap_const_logic_1;
        else 
            line_buf_value_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_value_d1 <= (fifo3_value_dout & tmp_fu_364_p4);

    line_buf_value_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln324_reg_708, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln324_reg_708 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_value_we1 <= ap_const_logic_1;
        else 
            line_buf_value_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln354_fu_420_p2 <= (icmp_ln354_fu_408_p2 or icmp_ln354_1_fu_414_p2);
    or_ln360_fu_510_p2 <= (icmp_ln360_fu_434_p2 or icmp_ln353_fu_402_p2);
    or_ln361_fu_452_p2 <= (icmp_ln361_fu_440_p2 or icmp_ln361_1_fu_446_p2);
    or_ln367_fu_564_p2 <= (or_ln360_fu_510_p2 or icmp_ln367_fu_466_p2);
    or_ln368_fu_484_p2 <= (icmp_ln368_fu_472_p2 or icmp_ln368_1_fu_478_p2);
    or_ln375_fu_617_p2 <= (icmp_ln375_reg_749 or icmp_ln368_reg_744);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln353_fu_536_p3 <= 
        select_ln354_fu_426_p3 when (icmp_ln353_fu_402_p2(0) = '1') else 
        select_ln367_fu_528_p3;
    select_ln354_fu_426_p3 <= 
        ap_const_lv8_0 when (or_ln354_fu_420_p2(0) = '1') else 
        value_nms_1_fu_136;
    select_ln360_fu_556_p3 <= 
        select_ln361_fu_458_p3 when (and_ln360_fu_550_p2(0) = '1') else 
        select_ln353_fu_536_p3;
    select_ln361_fu_458_p3 <= 
        ap_const_lv8_0 when (or_ln361_fu_452_p2(0) = '1') else 
        value_nms_1_fu_136;
    select_ln367_fu_528_p3 <= 
        select_ln368_fu_490_p3 when (and_ln367_fu_522_p2(0) = '1') else 
        value_nms_1_fu_136;
    select_ln368_fu_490_p3 <= 
        ap_const_lv8_0 when (or_ln368_fu_484_p2(0) = '1') else 
        value_nms_1_fu_136;
    select_ln374_fu_628_p3 <= 
        select_ln375_fu_621_p3 when (and_ln374_reg_759(0) = '1') else 
        select_ln360_reg_754;
    select_ln375_fu_621_p3 <= 
        ap_const_lv8_0 when (or_ln375_fu_617_p2(0) = '1') else 
        window_buf_1_1_val_reg_739;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_383_p4 <= line_buf_grad_q0(5 downto 2);
    tmp_8_fu_245_p4 <= yi_0_i_reg_211(9 downto 2);
    tmp_9_fu_291_p4 <= xi_0_i_reg_222(9 downto 2);
    tmp_fu_364_p4 <= line_buf_value_q0(23 downto 8);
    window_buf_0_2_val_fu_334_p4 <= line_buf_value_q0(15 downto 8);
    window_buf_1_2_val_fu_344_p4 <= line_buf_value_q0(23 downto 16);
    xi_fu_279_p2 <= std_logic_vector(unsigned(xi_0_i_reg_222) + unsigned(ap_const_lv10_1));
    xor_ln353_fu_544_p2 <= (icmp_ln353_fu_402_p2 xor ap_const_lv1_1);
    xor_ln360_fu_516_p2 <= (or_ln360_fu_510_p2 xor ap_const_lv1_1);
    xor_ln367_fu_570_p2 <= (or_ln367_fu_564_p2 xor ap_const_lv1_1);
    yi_fu_239_p2 <= std_logic_vector(unsigned(yi_0_i_reg_211) + unsigned(ap_const_lv10_1));
    zext_ln334_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_0_i_reg_222),64));
end behav;
