// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIS2GrayArray66_HH_
#define _AXIS2GrayArray66_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "canny_edge_detectbkb.h"
#include "canny_edge_detectcud.h"
#include "canny_edge_detectdEe.h"

namespace ap_rtl {

struct AXIS2GrayArray66 : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > axis_in_TDATA;
    sc_in< sc_logic > axis_in_TVALID;
    sc_out< sc_logic > axis_in_TREADY;
    sc_in< sc_lv<8> > hist_hthr_dout;
    sc_in< sc_logic > hist_hthr_empty_n;
    sc_out< sc_logic > hist_hthr_read;
    sc_in< sc_lv<8> > hist_lthr_dout;
    sc_in< sc_logic > hist_lthr_empty_n;
    sc_out< sc_logic > hist_lthr_read;
    sc_out< sc_lv<8> > hist_hthr_out_din;
    sc_in< sc_logic > hist_hthr_out_full_n;
    sc_out< sc_logic > hist_hthr_out_write;
    sc_out< sc_lv<8> > hist_lthr_out_din;
    sc_in< sc_logic > hist_lthr_out_full_n;
    sc_out< sc_logic > hist_lthr_out_write;
    sc_out< sc_lv<8> > fifo1_din;
    sc_in< sc_logic > fifo1_full_n;
    sc_out< sc_logic > fifo1_write;


    // Module declarations
    AXIS2GrayArray66(sc_module_name name);
    SC_HAS_PROCESS(AXIS2GrayArray66);

    ~AXIS2GrayArray66();

    sc_trace_file* mVcdFile;

    canny_edge_detectbkb<1,1,15,8,23>* canny_edge_detectbkb_U5;
    canny_edge_detectcud<1,1,17,8,23,25>* canny_edge_detectcud_U6;
    canny_edge_detectdEe<1,1,16,8,23,23>* canny_edge_detectdEe_U7;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > axis_src_data_V_0_data_out;
    sc_signal< sc_logic > axis_src_data_V_0_vld_in;
    sc_signal< sc_logic > axis_src_data_V_0_vld_out;
    sc_signal< sc_logic > axis_src_data_V_0_ack_in;
    sc_signal< sc_logic > axis_src_data_V_0_ack_out;
    sc_signal< sc_lv<24> > axis_src_data_V_0_payload_A;
    sc_signal< sc_lv<24> > axis_src_data_V_0_payload_B;
    sc_signal< sc_logic > axis_src_data_V_0_sel_rd;
    sc_signal< sc_logic > axis_src_data_V_0_sel_wr;
    sc_signal< sc_logic > axis_src_data_V_0_sel;
    sc_signal< sc_logic > axis_src_data_V_0_load_A;
    sc_signal< sc_logic > axis_src_data_V_0_load_B;
    sc_signal< sc_lv<2> > axis_src_data_V_0_state;
    sc_signal< sc_logic > axis_src_data_V_0_state_cmp_full;
    sc_signal< sc_logic > axis_in_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln87_fu_207_p2;
    sc_signal< sc_logic > hist_hthr_blk_n;
    sc_signal< sc_logic > hist_lthr_blk_n;
    sc_signal< sc_logic > hist_hthr_out_blk_n;
    sc_signal< sc_logic > hist_lthr_out_blk_n;
    sc_signal< sc_logic > fifo1_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln87_reg_313;
    sc_signal< sc_lv<1> > icmp_ln87_reg_313_pp0_iter1_reg;
    sc_signal< sc_lv<10> > xi_0_i_i_i_reg_184;
    sc_signal< sc_lv<1> > icmp_ln86_fu_195_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > yi_fu_201_p2;
    sc_signal< sc_lv<10> > yi_reg_308;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > xi_fu_213_p2;
    sc_signal< sc_lv<23> > mul_ln544_fu_280_p2;
    sc_signal< sc_lv<23> > mul_ln544_reg_322;
    sc_signal< sc_lv<8> > trunc_ln_i_reg_327;
    sc_signal< sc_lv<8> > tmp_8_i_reg_332;
    sc_signal< sc_lv<8> > phitmp318_i_i_i_fu_272_p3;
    sc_signal< sc_lv<8> > phitmp318_i_i_i_reg_337;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<10> > yi_0_i_i_i_reg_173;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > ret_V_fu_219_p1;
    sc_signal< sc_lv<23> > grp_fu_296_p3;
    sc_signal< sc_lv<25> > grp_fu_286_p3;
    sc_signal< sc_lv<1> > tmp_fu_256_p3;
    sc_signal< sc_lv<8> > tmp_9_i_fu_263_p4;
    sc_signal< sc_lv<15> > mul_ln544_fu_280_p0;
    sc_signal< sc_lv<8> > mul_ln544_fu_280_p1;
    sc_signal< sc_lv<17> > grp_fu_286_p0;
    sc_signal< sc_lv<8> > grp_fu_286_p1;
    sc_signal< sc_lv<23> > grp_fu_286_p2;
    sc_signal< sc_lv<16> > grp_fu_296_p0;
    sc_signal< sc_lv<8> > grp_fu_296_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<25> > grp_fu_286_p10;
    sc_signal< sc_lv<25> > grp_fu_286_p20;
    sc_signal< sc_lv<23> > grp_fu_296_p10;
    sc_signal< sc_lv<23> > mul_ln544_fu_280_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_24DD;
    static const sc_lv<25> ap_const_lv25_9645;
    static const sc_lv<23> ap_const_lv23_4C8B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_axis_in_TDATA_blk_n();
    void thread_axis_in_TREADY();
    void thread_axis_src_data_V_0_ack_in();
    void thread_axis_src_data_V_0_ack_out();
    void thread_axis_src_data_V_0_data_out();
    void thread_axis_src_data_V_0_load_A();
    void thread_axis_src_data_V_0_load_B();
    void thread_axis_src_data_V_0_sel();
    void thread_axis_src_data_V_0_state_cmp_full();
    void thread_axis_src_data_V_0_vld_in();
    void thread_axis_src_data_V_0_vld_out();
    void thread_fifo1_blk_n();
    void thread_fifo1_din();
    void thread_fifo1_write();
    void thread_grp_fu_286_p0();
    void thread_grp_fu_286_p1();
    void thread_grp_fu_286_p10();
    void thread_grp_fu_286_p2();
    void thread_grp_fu_286_p20();
    void thread_grp_fu_296_p0();
    void thread_grp_fu_296_p1();
    void thread_grp_fu_296_p10();
    void thread_hist_hthr_blk_n();
    void thread_hist_hthr_out_blk_n();
    void thread_hist_hthr_out_din();
    void thread_hist_hthr_out_write();
    void thread_hist_hthr_read();
    void thread_hist_lthr_blk_n();
    void thread_hist_lthr_out_blk_n();
    void thread_hist_lthr_out_din();
    void thread_hist_lthr_out_write();
    void thread_hist_lthr_read();
    void thread_icmp_ln86_fu_195_p2();
    void thread_icmp_ln87_fu_207_p2();
    void thread_internal_ap_ready();
    void thread_mul_ln544_fu_280_p0();
    void thread_mul_ln544_fu_280_p1();
    void thread_mul_ln544_fu_280_p10();
    void thread_phitmp318_i_i_i_fu_272_p3();
    void thread_real_start();
    void thread_ret_V_fu_219_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_9_i_fu_263_p4();
    void thread_tmp_fu_256_p3();
    void thread_xi_fu_213_p2();
    void thread_yi_fu_201_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
