-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel_1920u_1080u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fifo2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo2_empty_n : IN STD_LOGIC;
    fifo2_read : OUT STD_LOGIC;
    fifo3_value_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo3_value_full_n : IN STD_LOGIC;
    fifo3_value_write : OUT STD_LOGIC;
    fifo3_grad_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    fifo3_grad_full_n : IN STD_LOGIC;
    fifo3_grad_write : OUT STD_LOGIC );
end;


architecture behav of Sobel_1920u_1080u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_435 : STD_LOGIC_VECTOR (10 downto 0) := "10000110101";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_77D : STD_LOGIC_VECTOR (10 downto 0) := "11101111101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFD96 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110110010110";
    constant ap_const_lv32_FFFFFF97 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110010111";
    constant ap_const_lv32_FFFFFF96 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110010110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_26A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal fifo2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln221_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo3_value_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal and_ln299_2_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo3_grad_blk_n : STD_LOGIC;
    signal xi_0_i_reg_250 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln220_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yi_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal yi_reg_959 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln299_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_1_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln221_reg_969_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_969_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal line_buf_addr_reg_978 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln299_2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_reg_984_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal window_buf_2_1_2_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_2_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_2_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln254_fu_454_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln254_reg_1004 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln261_1_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln261_1_reg_1009 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln254_2_fu_545_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln254_2_reg_1014 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln261_2_fu_577_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln261_2_reg_1019 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln261_2_reg_1019_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln274_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_reg_1024_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln265_fu_906_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln265_reg_1038 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_912_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln265_reg_1043 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln301_fu_785_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln301_reg_1074 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln301_reg_1074_pp0_iter24_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln301_reg_1074_pp0_iter25_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal t_int_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal line_buf_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buf_ce0 : STD_LOGIC;
    signal line_buf_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal line_buf_ce1 : STD_LOGIC;
    signal line_buf_we1 : STD_LOGIC;
    signal line_buf_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal yi_0_i_reg_239 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_phi_reg_pp0_iter0_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_t_int_0_i_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln231_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buf_0_1_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_1_1_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_0_2_fu_385_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_1_1_1_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buf_2_1_1_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_292_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln299_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_337_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln299_2_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_3_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_405_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln254_cast10_i_s_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln254_fu_428_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln254_fu_432_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_442_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln254_1_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln254_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1_fu_460_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln261_fu_472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln261_1_fu_478_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln261_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln254_1_fu_516_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln254_2_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln254_1_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln254_3_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln254_1_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln254_4_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln261_2_fu_551_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln261_1_fu_560_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln261_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln261_3_fu_567_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln261_1_fu_571_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln2_fu_589_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_605_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_s_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_646_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_650_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_636_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_668_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_688_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_692_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_704_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_660_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_708_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_712_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_fu_724_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_718_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_736_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_765_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln268_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_fu_781_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln282_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln290_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln290_1_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln290_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln286_1_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln286_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln286_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln286_1_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln286_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln286_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln286_fu_883_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln290_fu_845_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln265_fu_906_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln261_fu_615_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln265_fu_906_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln265_fu_618_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_912_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_272_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_605_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component canny_edge_rectang8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_edge_rectanhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component canny_edge_rectanibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component canny_edge_rectanjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component canny_edge_rectankbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component Sobel_1920u_1080ufYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    line_buf_U : component Sobel_1920u_1080ufYi
    generic map (
        DataWidth => 24,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf_address0,
        ce0 => line_buf_ce0,
        q0 => line_buf_q0,
        address1 => line_buf_addr_reg_978,
        ce1 => line_buf_ce1,
        we1 => line_buf_we1,
        d1 => line_buf_d1);

    canny_edge_rectang8j_U26 : component canny_edge_rectang8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        ce => grp_fu_272_ce,
        dout => grp_fu_272_p1);

    canny_edge_rectanhbi_U27 : component canny_edge_rectanhbi
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => x_assign_reg_1053,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    canny_edge_rectanibs_U28 : component canny_edge_rectanibs
    generic map (
        ID => 1,
        NUM_STAGE => 24,
        din0_WIDTH => 20,
        din1_WIDTH => 11,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_605_p0,
        din1 => sub_ln254_2_fu_545_p2,
        ce => grp_fu_605_ce,
        dout => grp_fu_605_p2);

    canny_edge_rectanjbC_U29 : component canny_edge_rectanjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln265_fu_906_p0,
        din1 => mul_ln265_fu_906_p1,
        dout => mul_ln265_fu_906_p2);

    canny_edge_rectankbM_U30 : component canny_edge_rectankbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_912_p0,
        din1 => grp_fu_912_p1,
        din2 => mul_ln265_reg_1038,
        dout => grp_fu_912_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln220_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln221_fu_320_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln220_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif (((icmp_ln220_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter26_t_int_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln274_reg_1024_pp0_iter24_reg = ap_const_lv1_0) and (icmp_ln221_reg_969_pp0_iter24_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter26_t_int_0_i_reg_261 <= t_int_fu_793_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter26_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter25_t_int_0_i_reg_261;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_t_int_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln274_fu_583_p2 = ap_const_lv1_1) and (icmp_ln221_reg_969_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_t_int_0_i_reg_261 <= ap_const_lv32_7FFFFFFF;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter2_t_int_0_i_reg_261;
                end if;
            end if; 
        end if;
    end process;

    xi_0_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                xi_0_i_reg_250 <= xi_fu_326_p2;
            elsif (((icmp_ln220_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_0_i_reg_250 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    yi_0_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                yi_0_i_reg_239 <= yi_reg_959;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_0_i_reg_239 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln254_reg_1004 <= add_ln254_fu_454_p2;
                add_ln261_1_reg_1009 <= add_ln261_1_fu_482_p2;
                window_buf_1_2_reg_994 <= line_buf_q0(23 downto 16);
                window_buf_2_2_reg_999 <= fifo2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln265_reg_1043 <= grp_fu_912_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln299_1_reg_964 <= and_ln299_1_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln299_2_reg_984 <= and_ln299_2_fu_365_p2;
                line_buf_addr_reg_978 <= zext_ln231_fu_332_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln299_2_reg_984_pp0_iter10_reg <= and_ln299_2_reg_984_pp0_iter9_reg;
                and_ln299_2_reg_984_pp0_iter11_reg <= and_ln299_2_reg_984_pp0_iter10_reg;
                and_ln299_2_reg_984_pp0_iter12_reg <= and_ln299_2_reg_984_pp0_iter11_reg;
                and_ln299_2_reg_984_pp0_iter13_reg <= and_ln299_2_reg_984_pp0_iter12_reg;
                and_ln299_2_reg_984_pp0_iter14_reg <= and_ln299_2_reg_984_pp0_iter13_reg;
                and_ln299_2_reg_984_pp0_iter15_reg <= and_ln299_2_reg_984_pp0_iter14_reg;
                and_ln299_2_reg_984_pp0_iter16_reg <= and_ln299_2_reg_984_pp0_iter15_reg;
                and_ln299_2_reg_984_pp0_iter17_reg <= and_ln299_2_reg_984_pp0_iter16_reg;
                and_ln299_2_reg_984_pp0_iter18_reg <= and_ln299_2_reg_984_pp0_iter17_reg;
                and_ln299_2_reg_984_pp0_iter19_reg <= and_ln299_2_reg_984_pp0_iter18_reg;
                and_ln299_2_reg_984_pp0_iter20_reg <= and_ln299_2_reg_984_pp0_iter19_reg;
                and_ln299_2_reg_984_pp0_iter21_reg <= and_ln299_2_reg_984_pp0_iter20_reg;
                and_ln299_2_reg_984_pp0_iter22_reg <= and_ln299_2_reg_984_pp0_iter21_reg;
                and_ln299_2_reg_984_pp0_iter23_reg <= and_ln299_2_reg_984_pp0_iter22_reg;
                and_ln299_2_reg_984_pp0_iter24_reg <= and_ln299_2_reg_984_pp0_iter23_reg;
                and_ln299_2_reg_984_pp0_iter25_reg <= and_ln299_2_reg_984_pp0_iter24_reg;
                and_ln299_2_reg_984_pp0_iter2_reg <= and_ln299_2_reg_984_pp0_iter1_reg;
                and_ln299_2_reg_984_pp0_iter3_reg <= and_ln299_2_reg_984_pp0_iter2_reg;
                and_ln299_2_reg_984_pp0_iter4_reg <= and_ln299_2_reg_984_pp0_iter3_reg;
                and_ln299_2_reg_984_pp0_iter5_reg <= and_ln299_2_reg_984_pp0_iter4_reg;
                and_ln299_2_reg_984_pp0_iter6_reg <= and_ln299_2_reg_984_pp0_iter5_reg;
                and_ln299_2_reg_984_pp0_iter7_reg <= and_ln299_2_reg_984_pp0_iter6_reg;
                and_ln299_2_reg_984_pp0_iter8_reg <= and_ln299_2_reg_984_pp0_iter7_reg;
                and_ln299_2_reg_984_pp0_iter9_reg <= and_ln299_2_reg_984_pp0_iter8_reg;
                icmp_ln221_reg_969_pp0_iter10_reg <= icmp_ln221_reg_969_pp0_iter9_reg;
                icmp_ln221_reg_969_pp0_iter11_reg <= icmp_ln221_reg_969_pp0_iter10_reg;
                icmp_ln221_reg_969_pp0_iter12_reg <= icmp_ln221_reg_969_pp0_iter11_reg;
                icmp_ln221_reg_969_pp0_iter13_reg <= icmp_ln221_reg_969_pp0_iter12_reg;
                icmp_ln221_reg_969_pp0_iter14_reg <= icmp_ln221_reg_969_pp0_iter13_reg;
                icmp_ln221_reg_969_pp0_iter15_reg <= icmp_ln221_reg_969_pp0_iter14_reg;
                icmp_ln221_reg_969_pp0_iter16_reg <= icmp_ln221_reg_969_pp0_iter15_reg;
                icmp_ln221_reg_969_pp0_iter17_reg <= icmp_ln221_reg_969_pp0_iter16_reg;
                icmp_ln221_reg_969_pp0_iter18_reg <= icmp_ln221_reg_969_pp0_iter17_reg;
                icmp_ln221_reg_969_pp0_iter19_reg <= icmp_ln221_reg_969_pp0_iter18_reg;
                icmp_ln221_reg_969_pp0_iter20_reg <= icmp_ln221_reg_969_pp0_iter19_reg;
                icmp_ln221_reg_969_pp0_iter21_reg <= icmp_ln221_reg_969_pp0_iter20_reg;
                icmp_ln221_reg_969_pp0_iter22_reg <= icmp_ln221_reg_969_pp0_iter21_reg;
                icmp_ln221_reg_969_pp0_iter23_reg <= icmp_ln221_reg_969_pp0_iter22_reg;
                icmp_ln221_reg_969_pp0_iter24_reg <= icmp_ln221_reg_969_pp0_iter23_reg;
                icmp_ln221_reg_969_pp0_iter2_reg <= icmp_ln221_reg_969_pp0_iter1_reg;
                icmp_ln221_reg_969_pp0_iter3_reg <= icmp_ln221_reg_969_pp0_iter2_reg;
                icmp_ln221_reg_969_pp0_iter4_reg <= icmp_ln221_reg_969_pp0_iter3_reg;
                icmp_ln221_reg_969_pp0_iter5_reg <= icmp_ln221_reg_969_pp0_iter4_reg;
                icmp_ln221_reg_969_pp0_iter6_reg <= icmp_ln221_reg_969_pp0_iter5_reg;
                icmp_ln221_reg_969_pp0_iter7_reg <= icmp_ln221_reg_969_pp0_iter6_reg;
                icmp_ln221_reg_969_pp0_iter8_reg <= icmp_ln221_reg_969_pp0_iter7_reg;
                icmp_ln221_reg_969_pp0_iter9_reg <= icmp_ln221_reg_969_pp0_iter8_reg;
                icmp_ln274_reg_1024_pp0_iter10_reg <= icmp_ln274_reg_1024_pp0_iter9_reg;
                icmp_ln274_reg_1024_pp0_iter11_reg <= icmp_ln274_reg_1024_pp0_iter10_reg;
                icmp_ln274_reg_1024_pp0_iter12_reg <= icmp_ln274_reg_1024_pp0_iter11_reg;
                icmp_ln274_reg_1024_pp0_iter13_reg <= icmp_ln274_reg_1024_pp0_iter12_reg;
                icmp_ln274_reg_1024_pp0_iter14_reg <= icmp_ln274_reg_1024_pp0_iter13_reg;
                icmp_ln274_reg_1024_pp0_iter15_reg <= icmp_ln274_reg_1024_pp0_iter14_reg;
                icmp_ln274_reg_1024_pp0_iter16_reg <= icmp_ln274_reg_1024_pp0_iter15_reg;
                icmp_ln274_reg_1024_pp0_iter17_reg <= icmp_ln274_reg_1024_pp0_iter16_reg;
                icmp_ln274_reg_1024_pp0_iter18_reg <= icmp_ln274_reg_1024_pp0_iter17_reg;
                icmp_ln274_reg_1024_pp0_iter19_reg <= icmp_ln274_reg_1024_pp0_iter18_reg;
                icmp_ln274_reg_1024_pp0_iter20_reg <= icmp_ln274_reg_1024_pp0_iter19_reg;
                icmp_ln274_reg_1024_pp0_iter21_reg <= icmp_ln274_reg_1024_pp0_iter20_reg;
                icmp_ln274_reg_1024_pp0_iter22_reg <= icmp_ln274_reg_1024_pp0_iter21_reg;
                icmp_ln274_reg_1024_pp0_iter23_reg <= icmp_ln274_reg_1024_pp0_iter22_reg;
                icmp_ln274_reg_1024_pp0_iter24_reg <= icmp_ln274_reg_1024_pp0_iter23_reg;
                icmp_ln274_reg_1024_pp0_iter3_reg <= icmp_ln274_reg_1024;
                icmp_ln274_reg_1024_pp0_iter4_reg <= icmp_ln274_reg_1024_pp0_iter3_reg;
                icmp_ln274_reg_1024_pp0_iter5_reg <= icmp_ln274_reg_1024_pp0_iter4_reg;
                icmp_ln274_reg_1024_pp0_iter6_reg <= icmp_ln274_reg_1024_pp0_iter5_reg;
                icmp_ln274_reg_1024_pp0_iter7_reg <= icmp_ln274_reg_1024_pp0_iter6_reg;
                icmp_ln274_reg_1024_pp0_iter8_reg <= icmp_ln274_reg_1024_pp0_iter7_reg;
                icmp_ln274_reg_1024_pp0_iter9_reg <= icmp_ln274_reg_1024_pp0_iter8_reg;
                select_ln301_reg_1074_pp0_iter24_reg <= select_ln301_reg_1074;
                select_ln301_reg_1074_pp0_iter25_reg <= select_ln301_reg_1074_pp0_iter24_reg;
                sub_ln261_2_reg_1019_pp0_iter3_reg <= sub_ln261_2_reg_1019;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln299_2_reg_984_pp0_iter1_reg <= and_ln299_2_reg_984;
                icmp_ln221_reg_969 <= icmp_ln221_fu_320_p2;
                icmp_ln221_reg_969_pp0_iter1_reg <= icmp_ln221_reg_969;
                window_buf_2_1_2_reg_988 <= window_buf_2_1_1_fu_194;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter9_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter10_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter11_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter12_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter13_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter14_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter15_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter16_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter17_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter18_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter0_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter19_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter20_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter21_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter22_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter23_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter24_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter1_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter3_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter4_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter5_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter6_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter7_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_t_int_0_i_reg_261 <= ap_phi_reg_pp0_iter8_t_int_0_i_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln274_reg_1024 <= icmp_ln274_fu_583_p2;
                sub_ln254_2_reg_1014 <= sub_ln254_2_fu_545_p2;
                sub_ln261_2_reg_1019 <= sub_ln261_2_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln265_reg_1038 <= mul_ln265_fu_906_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_1063 <= p_Val2_s_fu_625_p1(31 downto 31);
                p_Val2_5_reg_1068 <= p_Val2_5_fu_746_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter22_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln301_reg_1074 <= select_ln301_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_buf_0_1_1_fu_178 <= line_buf_q0(15 downto 8);
                window_buf_0_1_fu_174 <= window_buf_0_1_1_fu_178;
                window_buf_1_1_1_fu_186 <= line_buf_q0(23 downto 16);
                window_buf_1_1_fu_182 <= window_buf_1_1_1_fu_186;
                window_buf_2_1_1_fu_194 <= fifo2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                window_buf_2_1_fu_190 <= window_buf_2_1_2_reg_988;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_2_reg_1058 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln221_reg_969_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_1053 <= grp_fu_272_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                yi_reg_959 <= yi_fu_286_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter26, icmp_ln220_fu_280_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln220_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln254_1_fu_536_p2 <= std_logic_vector(unsigned(sub_ln254_1_fu_527_p2) + unsigned(zext_ln254_3_fu_532_p1));
    add_ln254_fu_454_p2 <= std_logic_vector(unsigned(zext_ln254_1_fu_450_p1) + unsigned(sext_ln254_fu_438_p1));
    add_ln261_1_fu_482_p2 <= std_logic_vector(unsigned(zext_ln261_1_fu_478_p1) + unsigned(zext_ln261_fu_468_p1));
    add_ln261_fu_472_p2 <= std_logic_vector(unsigned(zext_ln254_cast10_i_s_fu_424_p1) + unsigned(zext_ln254_fu_428_p1));
    add_ln339_fu_668_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_664_p1));
    and_ln282_1_fu_853_p2 <= (icmp_ln282_fu_797_p2 and icmp_ln282_1_fu_803_p2);
    and_ln282_fu_809_p2 <= (icmp_ln282_fu_797_p2 and icmp_ln282_1_fu_803_p2);
    and_ln286_1_fu_871_p2 <= (icmp_ln286_fu_815_p2 and and_ln286_fu_865_p2);
    and_ln286_fu_865_p2 <= (xor_ln282_fu_859_p2 and icmp_ln286_1_fu_821_p2);
    and_ln290_fu_839_p2 <= (icmp_ln290_fu_827_p2 and icmp_ln290_1_fu_833_p2);
    and_ln299_1_fu_314_p2 <= (icmp_ln299_fu_302_p2 and icmp_ln299_1_fu_308_p2);
    and_ln299_2_fu_365_p2 <= (and_ln299_fu_359_p2 and and_ln299_1_reg_964);
    and_ln299_fu_359_p2 <= (icmp_ln299_3_fu_353_p2 and icmp_ln299_2_fu_347_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo2_empty_n, fifo3_value_full_n, fifo3_grad_full_n, ap_enable_reg_pp0_iter1, icmp_ln221_reg_969, ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)))) or ((icmp_ln221_reg_969 = ap_const_lv1_0) and (fifo2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo2_empty_n, fifo3_value_full_n, fifo3_grad_full_n, ap_enable_reg_pp0_iter1, icmp_ln221_reg_969, ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)))) or ((icmp_ln221_reg_969 = ap_const_lv1_0) and (fifo2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo2_empty_n, fifo3_value_full_n, fifo3_grad_full_n, ap_enable_reg_pp0_iter1, icmp_ln221_reg_969, ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)))) or ((icmp_ln221_reg_969 = ap_const_lv1_0) and (fifo2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp0_stage0_iter26_assign_proc : process(fifo3_value_full_n, fifo3_grad_full_n, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
                ap_block_state29_pp0_stage0_iter26 <= (((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_grad_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (fifo3_value_full_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo2_empty_n, icmp_ln221_reg_969)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln221_reg_969 = ap_const_lv1_0) and (fifo2_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln220_fu_280_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln220_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_t_int_0_i_reg_261 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    fifo2_blk_n_assign_proc : process(fifo2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln221_reg_969)
    begin
        if (((icmp_ln221_reg_969 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo2_blk_n <= fifo2_empty_n;
        else 
            fifo2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln221_reg_969, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln221_reg_969 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo2_read <= ap_const_logic_1;
        else 
            fifo2_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo3_grad_blk_n_assign_proc : process(fifo3_grad_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
        if ((((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then 
            fifo3_grad_blk_n <= fifo3_grad_full_n;
        else 
            fifo3_grad_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo3_grad_din <= 
        select_ln286_fu_883_p3 when (or_ln286_fu_891_p2(0) = '1') else 
        select_ln290_fu_845_p3;

    fifo3_grad_write_assign_proc : process(ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            fifo3_grad_write <= ap_const_logic_1;
        else 
            fifo3_grad_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo3_value_blk_n_assign_proc : process(fifo3_value_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg)
    begin
        if ((((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then 
            fifo3_value_blk_n <= fifo3_value_full_n;
        else 
            fifo3_value_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo3_value_din_assign_proc : process(ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg, select_ln301_reg_1074_pp0_iter25_reg, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then
            if ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg)) then 
                fifo3_value_din <= select_ln301_reg_1074_pp0_iter25_reg;
            elsif ((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg)) then 
                fifo3_value_din <= ap_const_lv8_0;
            else 
                fifo3_value_din <= "XXXXXXXX";
            end if;
        else 
            fifo3_value_din <= "XXXXXXXX";
        end if; 
    end process;


    fifo3_value_write_assign_proc : process(ap_enable_reg_pp0_iter26, and_ln299_2_reg_984_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_lv1_1 = and_ln299_2_reg_984_pp0_iter25_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            fifo3_value_write <= ap_const_logic_1;
        else 
            fifo3_value_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_272_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_272_ce <= ap_const_logic_1;
        else 
            grp_fu_272_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_272_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln265_reg_1043),32));


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_605_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_605_ce <= ap_const_logic_1;
        else 
            grp_fu_605_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_605_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_589_p3),20));

    grp_fu_912_p0 <= sext_ln265_fu_618_p1(11 - 1 downto 0);
    grp_fu_912_p1 <= sext_ln265_fu_618_p1(11 - 1 downto 0);
    icmp_ln220_fu_280_p2 <= "1" when (yi_0_i_reg_239 = ap_const_lv11_438) else "0";
    icmp_ln221_fu_320_p2 <= "1" when (xi_0_i_reg_250 = ap_const_lv11_780) else "0";
    icmp_ln268_fu_775_p2 <= "1" when (signed(tmp_6_fu_765_p4) > signed(ap_const_lv24_0)) else "0";
    icmp_ln274_fu_583_p2 <= "1" when (add_ln254_1_fu_536_p2 = zext_ln254_4_fu_542_p1) else "0";
    icmp_ln282_1_fu_803_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) < signed(ap_const_lv32_FFFFFF97)) else "0";
    icmp_ln282_fu_797_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) > signed(ap_const_lv32_FFFFFD96)) else "0";
    icmp_ln286_1_fu_821_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) < signed(ap_const_lv32_6B)) else "0";
    icmp_ln286_fu_815_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) > signed(ap_const_lv32_FFFFFF96)) else "0";
    icmp_ln290_1_fu_833_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) < signed(ap_const_lv32_26A)) else "0";
    icmp_ln290_fu_827_p2 <= "1" when (signed(ap_phi_reg_pp0_iter26_t_int_0_i_reg_261) > signed(ap_const_lv32_6A)) else "0";
    icmp_ln299_1_fu_308_p2 <= "1" when (unsigned(yi_0_i_reg_239) < unsigned(ap_const_lv11_435)) else "0";
    icmp_ln299_2_fu_347_p2 <= "0" when (tmp_7_fu_337_p4 = ap_const_lv9_0) else "1";
    icmp_ln299_3_fu_353_p2 <= "1" when (unsigned(xi_0_i_reg_250) < unsigned(ap_const_lv11_77D)) else "0";
    icmp_ln299_fu_302_p2 <= "0" when (tmp_1_fu_292_p4 = ap_const_lv9_0) else "1";

    internal_ap_ready_assign_proc : process(icmp_ln220_fu_280_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln220_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_674_p3 <= add_ln339_fu_668_p2(8 downto 8);
    line_buf_address0 <= zext_ln231_fu_332_p1(11 - 1 downto 0);

    line_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_ce0 <= ap_const_logic_1;
        else 
            line_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_ce1 <= ap_const_logic_1;
        else 
            line_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buf_d1 <= (fifo2_dout & tmp_fu_405_p4);

    line_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln221_reg_969, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln221_reg_969 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buf_we1 <= ap_const_logic_1;
        else 
            line_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_V_fu_650_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_646_p1) & ap_const_lv1_0);
    mul_ln265_fu_906_p0 <= sext_ln261_fu_615_p1(11 - 1 downto 0);
    mul_ln265_fu_906_p1 <= sext_ln261_fu_615_p1(11 - 1 downto 0);
    or_ln286_fu_891_p2 <= (and_ln286_1_fu_871_p2 or and_ln282_fu_809_p2);
    p_Val2_5_fu_746_p3 <= 
        zext_ln662_fu_732_p1 when (isNeg_fu_674_p3(0) = '1') else 
        tmp_3_fu_736_p4;
    p_Val2_6_fu_759_p3 <= 
        result_V_1_fu_754_p2 when (p_Result_s_reg_1063(0) = '1') else 
        p_Val2_5_reg_1068;
    p_Val2_s_fu_625_p1 <= x_assign_2_reg_1058;
    r_V_1_fu_718_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_660_p1),to_integer(unsigned('0' & zext_ln1287_fu_708_p1(31-1 downto 0)))));
    r_V_fu_712_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_650_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_704_p1(25-1 downto 0)))));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    result_V_1_fu_754_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_1068));
    select_ln286_fu_883_p3 <= 
        ap_const_lv2_3 when (xor_ln286_fu_877_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln290_fu_845_p3 <= 
        ap_const_lv2_1 when (and_ln290_fu_839_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln301_fu_785_p3 <= 
        ap_const_lv8_FF when (icmp_ln268_fu_775_p2(0) = '1') else 
        trunc_ln301_fu_781_p1;
        sext_ln1311_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_692_p3),32));

        sext_ln1311_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_692_p3),25));

        sext_ln1311_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_682_p2),9));

        sext_ln254_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln254_fu_432_p2),11));

        sext_ln261_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln254_2_reg_1014),22));

        sext_ln265_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln261_2_reg_1019_pp0_iter3_reg),22));

    shl_ln1_fu_460_p3 <= (window_buf_0_1_1_fu_178 & ap_const_lv1_0);
    shl_ln254_1_fu_516_p3 <= (window_buf_1_2_reg_994 & ap_const_lv1_0);
    shl_ln261_1_fu_560_p3 <= (window_buf_2_1_2_reg_988 & ap_const_lv1_0);
    shl_ln2_fu_589_p3 <= (sub_ln261_2_fu_577_p2 & ap_const_lv8_0);
    shl_ln_fu_442_p3 <= (window_buf_1_1_fu_182 & ap_const_lv1_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1311_fu_682_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_636_p4));
    sub_ln254_1_fu_527_p2 <= std_logic_vector(unsigned(add_ln254_reg_1004) - unsigned(zext_ln254_2_fu_523_p1));
    sub_ln254_2_fu_545_p2 <= std_logic_vector(unsigned(add_ln254_1_fu_536_p2) - unsigned(zext_ln254_4_fu_542_p1));
    sub_ln254_fu_432_p2 <= std_logic_vector(unsigned(zext_ln254_cast10_i_s_fu_424_p1) - unsigned(zext_ln254_fu_428_p1));
    sub_ln261_1_fu_571_p2 <= std_logic_vector(unsigned(sub_ln261_fu_554_p2) - unsigned(zext_ln261_3_fu_567_p1));
    sub_ln261_2_fu_577_p2 <= std_logic_vector(unsigned(sub_ln261_1_fu_571_p2) - unsigned(zext_ln254_4_fu_542_p1));
    sub_ln261_fu_554_p2 <= std_logic_vector(unsigned(zext_ln261_2_fu_551_p1) - unsigned(zext_ln254_3_fu_532_p1));
        t_int_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_605_p2),32));

    tmp_1_fu_292_p4 <= yi_0_i_reg_239(10 downto 2);
    tmp_3_fu_736_p4 <= r_V_1_fu_718_p2(55 downto 24);
    tmp_5_fu_724_p3 <= r_V_fu_712_p2(24 downto 24);
    tmp_6_fu_765_p4 <= p_Val2_6_fu_759_p3(31 downto 8);
    tmp_7_fu_337_p4 <= xi_0_i_reg_250(10 downto 2);
    tmp_V_1_fu_646_p1 <= p_Val2_s_fu_625_p1(23 - 1 downto 0);
    tmp_V_fu_636_p4 <= p_Val2_s_fu_625_p1(30 downto 23);
    tmp_fu_405_p4 <= line_buf_q0(23 downto 8);
    trunc_ln301_fu_781_p1 <= p_Val2_6_fu_759_p3(8 - 1 downto 0);
    ush_fu_692_p3 <= 
        sext_ln1311_fu_688_p1 when (isNeg_fu_674_p3(0) = '1') else 
        add_ln339_fu_668_p2;
    window_buf_0_2_fu_385_p4 <= line_buf_q0(15 downto 8);
    xi_fu_326_p2 <= std_logic_vector(unsigned(xi_0_i_reg_250) + unsigned(ap_const_lv11_1));
    xor_ln282_fu_859_p2 <= (ap_const_lv1_1 xor and_ln282_1_fu_853_p2);
    xor_ln286_fu_877_p2 <= (ap_const_lv1_1 xor and_ln286_1_fu_871_p2);
    yi_fu_286_p2 <= std_logic_vector(unsigned(yi_0_i_reg_239) + unsigned(ap_const_lv11_1));
    zext_ln1287_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_700_p1),79));
    zext_ln231_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_0_i_reg_250),64));
    zext_ln254_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_442_p3),11));
    zext_ln254_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln254_1_fu_516_p3),11));
    zext_ln254_3_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_1_fu_190),11));
    zext_ln254_4_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_2_2_reg_999),11));
    zext_ln254_cast10_i_s_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_1_fu_174),9));
    zext_ln254_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_buf_0_2_fu_385_p4),9));
    zext_ln261_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln261_fu_472_p2),10));
    zext_ln261_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln261_1_reg_1009),11));
    zext_ln261_3_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln261_1_fu_560_p3),11));
    zext_ln261_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_460_p3),10));
    zext_ln339_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_636_p4),9));
    zext_ln662_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_724_p3),32));
    zext_ln682_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_650_p4),79));
end behav;
