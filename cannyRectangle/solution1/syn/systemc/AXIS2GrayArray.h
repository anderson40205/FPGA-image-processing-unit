// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIS2GrayArray_HH_
#define _AXIS2GrayArray_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "canny_edge_rectanbkb.h"
#include "canny_edge_rectancud.h"
#include "canny_edge_rectandEe.h"

namespace ap_rtl {

struct AXIS2GrayArray : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > axis_in_TDATA;
    sc_in< sc_logic > axis_in_TVALID;
    sc_out< sc_logic > axis_in_TREADY;
    sc_out< sc_lv<8> > fifo1_din;
    sc_in< sc_logic > fifo1_full_n;
    sc_out< sc_logic > fifo1_write;


    // Module declarations
    AXIS2GrayArray(sc_module_name name);
    SC_HAS_PROCESS(AXIS2GrayArray);

    ~AXIS2GrayArray();

    sc_trace_file* mVcdFile;

    canny_edge_rectanbkb<1,1,15,8,23>* canny_edge_rectanbkb_U15;
    canny_edge_rectancud<1,1,17,8,23,25>* canny_edge_rectancud_U16;
    canny_edge_rectandEe<1,1,16,8,23,23>* canny_edge_rectandEe_U17;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > axis_src_data_V_0_data_out;
    sc_signal< sc_logic > axis_src_data_V_0_vld_in;
    sc_signal< sc_logic > axis_src_data_V_0_vld_out;
    sc_signal< sc_logic > axis_src_data_V_0_ack_in;
    sc_signal< sc_logic > axis_src_data_V_0_ack_out;
    sc_signal< sc_lv<24> > axis_src_data_V_0_payload_A;
    sc_signal< sc_lv<24> > axis_src_data_V_0_payload_B;
    sc_signal< sc_logic > axis_src_data_V_0_sel_rd;
    sc_signal< sc_logic > axis_src_data_V_0_sel_wr;
    sc_signal< sc_logic > axis_src_data_V_0_sel;
    sc_signal< sc_logic > axis_src_data_V_0_load_A;
    sc_signal< sc_logic > axis_src_data_V_0_load_B;
    sc_signal< sc_lv<2> > axis_src_data_V_0_state;
    sc_signal< sc_logic > axis_src_data_V_0_state_cmp_full;
    sc_signal< sc_logic > axis_in_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln87_fu_129_p2;
    sc_signal< sc_logic > fifo1_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln87_reg_235;
    sc_signal< sc_lv<1> > icmp_ln87_reg_235_pp0_iter1_reg;
    sc_signal< sc_lv<11> > xi_0_reg_106;
    sc_signal< sc_lv<1> > icmp_ln86_fu_117_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > yi_fu_123_p2;
    sc_signal< sc_lv<11> > yi_reg_230;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > xi_fu_135_p2;
    sc_signal< sc_lv<23> > mul_ln544_fu_202_p2;
    sc_signal< sc_lv<23> > mul_ln544_reg_244;
    sc_signal< sc_lv<8> > trunc_ln_reg_249;
    sc_signal< sc_lv<8> > tmp_8_reg_254;
    sc_signal< sc_lv<8> > phitmp318_fu_194_p3;
    sc_signal< sc_lv<8> > phitmp318_reg_259;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<11> > yi_0_reg_95;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > ret_V_fu_141_p1;
    sc_signal< sc_lv<23> > grp_fu_218_p3;
    sc_signal< sc_lv<25> > grp_fu_208_p3;
    sc_signal< sc_lv<1> > tmp_10_fu_178_p3;
    sc_signal< sc_lv<8> > tmp_9_fu_185_p4;
    sc_signal< sc_lv<15> > mul_ln544_fu_202_p0;
    sc_signal< sc_lv<8> > mul_ln544_fu_202_p1;
    sc_signal< sc_lv<17> > grp_fu_208_p0;
    sc_signal< sc_lv<8> > grp_fu_208_p1;
    sc_signal< sc_lv<23> > grp_fu_208_p2;
    sc_signal< sc_lv<16> > grp_fu_218_p0;
    sc_signal< sc_lv<8> > grp_fu_218_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<25> > grp_fu_208_p10;
    sc_signal< sc_lv<25> > grp_fu_208_p20;
    sc_signal< sc_lv<23> > grp_fu_218_p10;
    sc_signal< sc_lv<23> > mul_ln544_fu_202_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_438;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<11> ap_const_lv11_780;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_24DD;
    static const sc_lv<25> ap_const_lv25_9645;
    static const sc_lv<23> ap_const_lv23_4C8B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_axis_in_TDATA_blk_n();
    void thread_axis_in_TREADY();
    void thread_axis_src_data_V_0_ack_in();
    void thread_axis_src_data_V_0_ack_out();
    void thread_axis_src_data_V_0_data_out();
    void thread_axis_src_data_V_0_load_A();
    void thread_axis_src_data_V_0_load_B();
    void thread_axis_src_data_V_0_sel();
    void thread_axis_src_data_V_0_state_cmp_full();
    void thread_axis_src_data_V_0_vld_in();
    void thread_axis_src_data_V_0_vld_out();
    void thread_fifo1_blk_n();
    void thread_fifo1_din();
    void thread_fifo1_write();
    void thread_grp_fu_208_p0();
    void thread_grp_fu_208_p1();
    void thread_grp_fu_208_p10();
    void thread_grp_fu_208_p2();
    void thread_grp_fu_208_p20();
    void thread_grp_fu_218_p0();
    void thread_grp_fu_218_p1();
    void thread_grp_fu_218_p10();
    void thread_icmp_ln86_fu_117_p2();
    void thread_icmp_ln87_fu_129_p2();
    void thread_internal_ap_ready();
    void thread_mul_ln544_fu_202_p0();
    void thread_mul_ln544_fu_202_p1();
    void thread_mul_ln544_fu_202_p10();
    void thread_phitmp318_fu_194_p3();
    void thread_real_start();
    void thread_ret_V_fu_141_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_10_fu_178_p3();
    void thread_tmp_9_fu_185_p4();
    void thread_xi_fu_135_p2();
    void thread_yi_fu_123_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
