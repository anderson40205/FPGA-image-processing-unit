// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _HystThreshold_HH_
#define _HystThreshold_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct HystThreshold : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > hthr_dout;
    sc_in< sc_logic > hthr_empty_n;
    sc_out< sc_logic > hthr_read;
    sc_in< sc_lv<8> > lthr_dout;
    sc_in< sc_logic > lthr_empty_n;
    sc_out< sc_logic > lthr_read;
    sc_in< sc_lv<8> > fifo5_dout;
    sc_in< sc_logic > fifo5_empty_n;
    sc_out< sc_logic > fifo5_read;
    sc_out< sc_lv<8> > fifo6_din;
    sc_in< sc_logic > fifo6_full_n;
    sc_out< sc_logic > fifo6_write;


    // Module declarations
    HystThreshold(sc_module_name name);
    SC_HAS_PROCESS(HystThreshold);

    ~HystThreshold();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > hthr_blk_n;
    sc_signal< sc_logic > lthr_blk_n;
    sc_signal< sc_logic > fifo5_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln397_reg_234;
    sc_signal< sc_logic > fifo6_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln397_reg_234_pp0_iter1_reg;
    sc_signal< sc_lv<11> > xi_0_i_i_reg_140;
    sc_signal< sc_lv<8> > hthr_read_reg_215;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > lthr_read_reg_220;
    sc_signal< sc_lv<1> > icmp_ln396_fu_151_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > yi_fu_157_p2;
    sc_signal< sc_lv<11> > yi_reg_229;
    sc_signal< sc_lv<1> > icmp_ln397_fu_163_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > xi_fu_169_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln404_fu_175_p2;
    sc_signal< sc_lv<1> > icmp_ln404_reg_243;
    sc_signal< sc_lv<1> > icmp_ln407_fu_180_p2;
    sc_signal< sc_lv<1> > icmp_ln407_reg_249;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<11> > yi_0_i_i_reg_129;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > xor_ln404_fu_185_p2;
    sc_signal< sc_lv<1> > or_ln404_fu_198_p2;
    sc_signal< sc_lv<2> > select_ln404_fu_190_p3;
    sc_signal< sc_lv<2> > select_ln404_1_fu_202_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_438;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<11> ap_const_lv11_780;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_fifo5_blk_n();
    void thread_fifo5_read();
    void thread_fifo6_blk_n();
    void thread_fifo6_din();
    void thread_fifo6_write();
    void thread_hthr_blk_n();
    void thread_hthr_read();
    void thread_icmp_ln396_fu_151_p2();
    void thread_icmp_ln397_fu_163_p2();
    void thread_icmp_ln404_fu_175_p2();
    void thread_icmp_ln407_fu_180_p2();
    void thread_internal_ap_ready();
    void thread_lthr_blk_n();
    void thread_lthr_read();
    void thread_or_ln404_fu_198_p2();
    void thread_real_start();
    void thread_select_ln404_1_fu_202_p3();
    void thread_select_ln404_fu_190_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_xi_fu_169_p2();
    void thread_xor_ln404_fu_185_p2();
    void thread_yi_fu_157_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
