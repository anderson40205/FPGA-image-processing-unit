// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXIS2GrayArray.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXIS2GrayArray::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXIS2GrayArray::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> AXIS2GrayArray::ap_ST_fsm_state1 = "1";
const sc_lv<4> AXIS2GrayArray::ap_ST_fsm_state2 = "10";
const sc_lv<4> AXIS2GrayArray::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> AXIS2GrayArray::ap_ST_fsm_state6 = "1000";
const bool AXIS2GrayArray::ap_const_boolean_1 = true;
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AXIS2GrayArray::ap_const_lv1_0 = "0";
const sc_lv<1> AXIS2GrayArray::ap_const_lv1_1 = "1";
const sc_lv<2> AXIS2GrayArray::ap_const_lv2_0 = "00";
const sc_lv<2> AXIS2GrayArray::ap_const_lv2_2 = "10";
const sc_lv<2> AXIS2GrayArray::ap_const_lv2_3 = "11";
const sc_lv<2> AXIS2GrayArray::ap_const_lv2_1 = "1";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_2 = "10";
const bool AXIS2GrayArray::ap_const_boolean_0 = false;
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_1 = "1";
const sc_lv<11> AXIS2GrayArray::ap_const_lv11_0 = "00000000000";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_3 = "11";
const sc_lv<11> AXIS2GrayArray::ap_const_lv11_438 = "10000111000";
const sc_lv<11> AXIS2GrayArray::ap_const_lv11_1 = "1";
const sc_lv<11> AXIS2GrayArray::ap_const_lv11_780 = "11110000000";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_8 = "1000";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_F = "1111";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_10 = "10000";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_17 = "10111";
const sc_lv<32> AXIS2GrayArray::ap_const_lv32_18 = "11000";
const sc_lv<8> AXIS2GrayArray::ap_const_lv8_FF = "11111111";
const sc_lv<23> AXIS2GrayArray::ap_const_lv23_24DD = "10010011011101";
const sc_lv<25> AXIS2GrayArray::ap_const_lv25_9645 = "1001011001000101";
const sc_lv<23> AXIS2GrayArray::ap_const_lv23_4C8B = "100110010001011";

AXIS2GrayArray::AXIS2GrayArray(sc_module_name name) : sc_module(name), mVcdFile(0) {
    canny_edge_rectanbkb_U15 = new canny_edge_rectanbkb<1,1,15,8,23>("canny_edge_rectanbkb_U15");
    canny_edge_rectanbkb_U15->din0(mul_ln544_fu_202_p0);
    canny_edge_rectanbkb_U15->din1(mul_ln544_fu_202_p1);
    canny_edge_rectanbkb_U15->dout(mul_ln544_fu_202_p2);
    canny_edge_rectancud_U16 = new canny_edge_rectancud<1,1,17,8,23,25>("canny_edge_rectancud_U16");
    canny_edge_rectancud_U16->din0(grp_fu_208_p0);
    canny_edge_rectancud_U16->din1(grp_fu_208_p1);
    canny_edge_rectancud_U16->din2(grp_fu_208_p2);
    canny_edge_rectancud_U16->dout(grp_fu_208_p3);
    canny_edge_rectandEe_U17 = new canny_edge_rectandEe<1,1,16,8,23,23>("canny_edge_rectandEe_U17");
    canny_edge_rectandEe_U17->din0(grp_fu_218_p0);
    canny_edge_rectandEe_U17->din1(grp_fu_218_p1);
    canny_edge_rectandEe_U17->din2(mul_ln544_reg_244);
    canny_edge_rectandEe_U17->dout(grp_fu_218_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( axis_src_data_V_0_vld_out );
    sensitive << ( fifo1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln87_fu_129_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( axis_src_data_V_0_vld_out );
    sensitive << ( fifo1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln87_fu_129_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( axis_src_data_V_0_vld_out );
    sensitive << ( fifo1_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln87_fu_129_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);
    sensitive << ( axis_src_data_V_0_vld_out );
    sensitive << ( icmp_ln87_fu_129_p2 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);
    sensitive << ( fifo1_full_n );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln87_fu_129_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( icmp_ln86_fu_117_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_axis_in_TDATA_blk_n);
    sensitive << ( axis_src_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_fu_129_p2 );

    SC_METHOD(thread_axis_in_TREADY);
    sensitive << ( axis_src_data_V_0_state );

    SC_METHOD(thread_axis_src_data_V_0_ack_in);
    sensitive << ( axis_src_data_V_0_state );

    SC_METHOD(thread_axis_src_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln87_fu_129_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_axis_src_data_V_0_data_out);
    sensitive << ( axis_src_data_V_0_payload_A );
    sensitive << ( axis_src_data_V_0_payload_B );
    sensitive << ( axis_src_data_V_0_sel );

    SC_METHOD(thread_axis_src_data_V_0_load_A);
    sensitive << ( axis_src_data_V_0_sel_wr );
    sensitive << ( axis_src_data_V_0_state_cmp_full );

    SC_METHOD(thread_axis_src_data_V_0_load_B);
    sensitive << ( axis_src_data_V_0_sel_wr );
    sensitive << ( axis_src_data_V_0_state_cmp_full );

    SC_METHOD(thread_axis_src_data_V_0_sel);
    sensitive << ( axis_src_data_V_0_sel_rd );

    SC_METHOD(thread_axis_src_data_V_0_state_cmp_full);
    sensitive << ( axis_src_data_V_0_state );

    SC_METHOD(thread_axis_src_data_V_0_vld_in);
    sensitive << ( axis_in_TVALID );

    SC_METHOD(thread_axis_src_data_V_0_vld_out);
    sensitive << ( axis_src_data_V_0_state );

    SC_METHOD(thread_fifo1_blk_n);
    sensitive << ( fifo1_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );

    SC_METHOD(thread_fifo1_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );
    sensitive << ( phitmp318_reg_259 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_fifo1_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln87_reg_235_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_208_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_reg_235 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_grp_fu_208_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_reg_235 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_fu_208_p10 );

    SC_METHOD(thread_grp_fu_208_p10);
    sensitive << ( trunc_ln_reg_249 );

    SC_METHOD(thread_grp_fu_208_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_reg_235 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_fu_208_p20 );

    SC_METHOD(thread_grp_fu_208_p20);
    sensitive << ( grp_fu_218_p3 );

    SC_METHOD(thread_grp_fu_218_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_reg_235 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_grp_fu_218_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln87_reg_235 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( grp_fu_218_p10 );

    SC_METHOD(thread_grp_fu_218_p10);
    sensitive << ( tmp_8_reg_254 );

    SC_METHOD(thread_icmp_ln86_fu_117_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( yi_0_reg_95 );

    SC_METHOD(thread_icmp_ln87_fu_129_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( xi_0_reg_106 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( icmp_ln86_fu_117_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mul_ln544_fu_202_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_mul_ln544_fu_202_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln544_fu_202_p10 );

    SC_METHOD(thread_mul_ln544_fu_202_p10);
    sensitive << ( ret_V_fu_141_p1 );

    SC_METHOD(thread_phitmp318_fu_194_p3);
    sensitive << ( tmp_10_fu_178_p3 );
    sensitive << ( tmp_9_fu_185_p4 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ret_V_fu_141_p1);
    sensitive << ( axis_src_data_V_0_data_out );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_10_fu_178_p3);
    sensitive << ( grp_fu_208_p3 );

    SC_METHOD(thread_tmp_9_fu_185_p4);
    sensitive << ( grp_fu_208_p3 );

    SC_METHOD(thread_xi_fu_135_p2);
    sensitive << ( xi_0_reg_106 );

    SC_METHOD(thread_yi_fu_123_p2);
    sensitive << ( yi_0_reg_95 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln87_fu_129_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln86_fu_117_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    axis_src_data_V_0_sel_rd = SC_LOGIC_0;
    axis_src_data_V_0_sel_wr = SC_LOGIC_0;
    axis_src_data_V_0_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXIS2GrayArray_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, axis_in_TDATA, "(port)axis_in_TDATA");
    sc_trace(mVcdFile, axis_in_TVALID, "(port)axis_in_TVALID");
    sc_trace(mVcdFile, axis_in_TREADY, "(port)axis_in_TREADY");
    sc_trace(mVcdFile, fifo1_din, "(port)fifo1_din");
    sc_trace(mVcdFile, fifo1_full_n, "(port)fifo1_full_n");
    sc_trace(mVcdFile, fifo1_write, "(port)fifo1_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, axis_src_data_V_0_data_out, "axis_src_data_V_0_data_out");
    sc_trace(mVcdFile, axis_src_data_V_0_vld_in, "axis_src_data_V_0_vld_in");
    sc_trace(mVcdFile, axis_src_data_V_0_vld_out, "axis_src_data_V_0_vld_out");
    sc_trace(mVcdFile, axis_src_data_V_0_ack_in, "axis_src_data_V_0_ack_in");
    sc_trace(mVcdFile, axis_src_data_V_0_ack_out, "axis_src_data_V_0_ack_out");
    sc_trace(mVcdFile, axis_src_data_V_0_payload_A, "axis_src_data_V_0_payload_A");
    sc_trace(mVcdFile, axis_src_data_V_0_payload_B, "axis_src_data_V_0_payload_B");
    sc_trace(mVcdFile, axis_src_data_V_0_sel_rd, "axis_src_data_V_0_sel_rd");
    sc_trace(mVcdFile, axis_src_data_V_0_sel_wr, "axis_src_data_V_0_sel_wr");
    sc_trace(mVcdFile, axis_src_data_V_0_sel, "axis_src_data_V_0_sel");
    sc_trace(mVcdFile, axis_src_data_V_0_load_A, "axis_src_data_V_0_load_A");
    sc_trace(mVcdFile, axis_src_data_V_0_load_B, "axis_src_data_V_0_load_B");
    sc_trace(mVcdFile, axis_src_data_V_0_state, "axis_src_data_V_0_state");
    sc_trace(mVcdFile, axis_src_data_V_0_state_cmp_full, "axis_src_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, axis_in_TDATA_blk_n, "axis_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln87_fu_129_p2, "icmp_ln87_fu_129_p2");
    sc_trace(mVcdFile, fifo1_blk_n, "fifo1_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln87_reg_235, "icmp_ln87_reg_235");
    sc_trace(mVcdFile, icmp_ln87_reg_235_pp0_iter1_reg, "icmp_ln87_reg_235_pp0_iter1_reg");
    sc_trace(mVcdFile, xi_0_reg_106, "xi_0_reg_106");
    sc_trace(mVcdFile, icmp_ln86_fu_117_p2, "icmp_ln86_fu_117_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, yi_fu_123_p2, "yi_fu_123_p2");
    sc_trace(mVcdFile, yi_reg_230, "yi_reg_230");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, xi_fu_135_p2, "xi_fu_135_p2");
    sc_trace(mVcdFile, mul_ln544_fu_202_p2, "mul_ln544_fu_202_p2");
    sc_trace(mVcdFile, mul_ln544_reg_244, "mul_ln544_reg_244");
    sc_trace(mVcdFile, trunc_ln_reg_249, "trunc_ln_reg_249");
    sc_trace(mVcdFile, tmp_8_reg_254, "tmp_8_reg_254");
    sc_trace(mVcdFile, phitmp318_fu_194_p3, "phitmp318_fu_194_p3");
    sc_trace(mVcdFile, phitmp318_reg_259, "phitmp318_reg_259");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, yi_0_reg_95, "yi_0_reg_95");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ret_V_fu_141_p1, "ret_V_fu_141_p1");
    sc_trace(mVcdFile, grp_fu_218_p3, "grp_fu_218_p3");
    sc_trace(mVcdFile, grp_fu_208_p3, "grp_fu_208_p3");
    sc_trace(mVcdFile, tmp_10_fu_178_p3, "tmp_10_fu_178_p3");
    sc_trace(mVcdFile, tmp_9_fu_185_p4, "tmp_9_fu_185_p4");
    sc_trace(mVcdFile, mul_ln544_fu_202_p0, "mul_ln544_fu_202_p0");
    sc_trace(mVcdFile, mul_ln544_fu_202_p1, "mul_ln544_fu_202_p1");
    sc_trace(mVcdFile, grp_fu_208_p0, "grp_fu_208_p0");
    sc_trace(mVcdFile, grp_fu_208_p1, "grp_fu_208_p1");
    sc_trace(mVcdFile, grp_fu_208_p2, "grp_fu_208_p2");
    sc_trace(mVcdFile, grp_fu_218_p0, "grp_fu_218_p0");
    sc_trace(mVcdFile, grp_fu_218_p1, "grp_fu_218_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_208_p10, "grp_fu_208_p10");
    sc_trace(mVcdFile, grp_fu_208_p20, "grp_fu_208_p20");
    sc_trace(mVcdFile, grp_fu_218_p10, "grp_fu_218_p10");
    sc_trace(mVcdFile, mul_ln544_fu_202_p10, "mul_ln544_fu_202_p10");
#endif

    }
}

AXIS2GrayArray::~AXIS2GrayArray() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete canny_edge_rectanbkb_U15;
    delete canny_edge_rectancud_U16;
    delete canny_edge_rectandEe_U17;
}

void AXIS2GrayArray::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln86_fu_117_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_117_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_117_p2.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_src_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_vld_out.read()))) {
            axis_src_data_V_0_sel_rd =  (sc_logic) (~axis_src_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_src_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_ack_in.read()))) {
            axis_src_data_V_0_sel_wr =  (sc_logic) (~axis_src_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_src_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_2)))) {
            axis_src_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_1)))) {
            axis_src_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(axis_src_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_ack_out.read()))))) {
            axis_src_data_V_0_state = ap_const_lv2_3;
        } else {
            axis_src_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_117_p2.read()))) {
        xi_0_reg_106 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        xi_0_reg_106 = xi_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        yi_0_reg_95 = yi_reg_230.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        yi_0_reg_95 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_load_A.read())) {
        axis_src_data_V_0_payload_A = axis_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_load_B.read())) {
        axis_src_data_V_0_payload_B = axis_in_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln87_reg_235 = icmp_ln87_fu_129_p2.read();
        icmp_ln87_reg_235_pp0_iter1_reg = icmp_ln87_reg_235.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mul_ln544_reg_244 = mul_ln544_fu_202_p2.read();
        tmp_8_reg_254 = axis_src_data_V_0_data_out.read().range(23, 16);
        trunc_ln_reg_249 = axis_src_data_V_0_data_out.read().range(15, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235.read()))) {
        phitmp318_reg_259 = phitmp318_fu_194_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        yi_reg_230 = yi_fu_123_p2.read();
    }
}

void AXIS2GrayArray::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void AXIS2GrayArray::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXIS2GrayArray::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXIS2GrayArray::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void AXIS2GrayArray::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIS2GrayArray::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fifo1_full_n.read())));
}

void AXIS2GrayArray::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fifo1_full_n.read())));
}

void AXIS2GrayArray::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, fifo1_full_n.read())));
}

void AXIS2GrayArray::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void AXIS2GrayArray::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, axis_src_data_V_0_vld_out.read()));
}

void AXIS2GrayArray::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIS2GrayArray::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, fifo1_full_n.read()));
}

void AXIS2GrayArray::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln87_fu_129_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln86_fu_117_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXIS2GrayArray::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXIS2GrayArray::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AXIS2GrayArray::thread_axis_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()))) {
        axis_in_TDATA_blk_n = axis_src_data_V_0_state.read()[0];
    } else {
        axis_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXIS2GrayArray::thread_axis_in_TREADY() {
    axis_in_TREADY = axis_src_data_V_0_state.read()[1];
}

void AXIS2GrayArray::thread_axis_src_data_V_0_ack_in() {
    axis_src_data_V_0_ack_in = axis_src_data_V_0_state.read()[1];
}

void AXIS2GrayArray::thread_axis_src_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_fu_129_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        axis_src_data_V_0_ack_out = ap_const_logic_1;
    } else {
        axis_src_data_V_0_ack_out = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_axis_src_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, axis_src_data_V_0_sel.read())) {
        axis_src_data_V_0_data_out = axis_src_data_V_0_payload_B.read();
    } else {
        axis_src_data_V_0_data_out = axis_src_data_V_0_payload_A.read();
    }
}

void AXIS2GrayArray::thread_axis_src_data_V_0_load_A() {
    axis_src_data_V_0_load_A = (axis_src_data_V_0_state_cmp_full.read() & ~axis_src_data_V_0_sel_wr.read());
}

void AXIS2GrayArray::thread_axis_src_data_V_0_load_B() {
    axis_src_data_V_0_load_B = (axis_src_data_V_0_sel_wr.read() & axis_src_data_V_0_state_cmp_full.read());
}

void AXIS2GrayArray::thread_axis_src_data_V_0_sel() {
    axis_src_data_V_0_sel = axis_src_data_V_0_sel_rd.read();
}

void AXIS2GrayArray::thread_axis_src_data_V_0_state_cmp_full() {
    axis_src_data_V_0_state_cmp_full =  (sc_logic) ((!axis_src_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(axis_src_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void AXIS2GrayArray::thread_axis_src_data_V_0_vld_in() {
    axis_src_data_V_0_vld_in = axis_in_TVALID.read();
}

void AXIS2GrayArray::thread_axis_src_data_V_0_vld_out() {
    axis_src_data_V_0_vld_out = axis_src_data_V_0_state.read()[0];
}

void AXIS2GrayArray::thread_fifo1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()))) {
        fifo1_blk_n = fifo1_full_n.read();
    } else {
        fifo1_blk_n = ap_const_logic_1;
    }
}

void AXIS2GrayArray::thread_fifo1_din() {
    fifo1_din = phitmp318_reg_259.read();
}

void AXIS2GrayArray::thread_fifo1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln87_reg_235_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        fifo1_write = ap_const_logic_1;
    } else {
        fifo1_write = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_grp_fu_208_p0() {
    grp_fu_208_p0 =  (sc_lv<17>) (ap_const_lv25_9645);
}

void AXIS2GrayArray::thread_grp_fu_208_p1() {
    grp_fu_208_p1 =  (sc_lv<8>) (grp_fu_208_p10.read());
}

void AXIS2GrayArray::thread_grp_fu_208_p10() {
    grp_fu_208_p10 = esl_zext<25,8>(trunc_ln_reg_249.read());
}

void AXIS2GrayArray::thread_grp_fu_208_p2() {
    grp_fu_208_p2 =  (sc_lv<23>) (grp_fu_208_p20.read());
}

void AXIS2GrayArray::thread_grp_fu_208_p20() {
    grp_fu_208_p20 = esl_zext<25,23>(grp_fu_218_p3.read());
}

void AXIS2GrayArray::thread_grp_fu_218_p0() {
    grp_fu_218_p0 =  (sc_lv<16>) (ap_const_lv23_4C8B);
}

void AXIS2GrayArray::thread_grp_fu_218_p1() {
    grp_fu_218_p1 =  (sc_lv<8>) (grp_fu_218_p10.read());
}

void AXIS2GrayArray::thread_grp_fu_218_p10() {
    grp_fu_218_p10 = esl_zext<23,8>(tmp_8_reg_254.read());
}

void AXIS2GrayArray::thread_icmp_ln86_fu_117_p2() {
    icmp_ln86_fu_117_p2 = (!yi_0_reg_95.read().is_01() || !ap_const_lv11_438.is_01())? sc_lv<1>(): sc_lv<1>(yi_0_reg_95.read() == ap_const_lv11_438);
}

void AXIS2GrayArray::thread_icmp_ln87_fu_129_p2() {
    icmp_ln87_fu_129_p2 = (!xi_0_reg_106.read().is_01() || !ap_const_lv11_780.is_01())? sc_lv<1>(): sc_lv<1>(xi_0_reg_106.read() == ap_const_lv11_780);
}

void AXIS2GrayArray::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln86_fu_117_p2.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_mul_ln544_fu_202_p0() {
    mul_ln544_fu_202_p0 =  (sc_lv<15>) (ap_const_lv23_24DD);
}

void AXIS2GrayArray::thread_mul_ln544_fu_202_p1() {
    mul_ln544_fu_202_p1 =  (sc_lv<8>) (mul_ln544_fu_202_p10.read());
}

void AXIS2GrayArray::thread_mul_ln544_fu_202_p10() {
    mul_ln544_fu_202_p10 = esl_zext<23,8>(ret_V_fu_141_p1.read());
}

void AXIS2GrayArray::thread_phitmp318_fu_194_p3() {
    phitmp318_fu_194_p3 = (!tmp_10_fu_178_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_10_fu_178_p3.read()[0].to_bool())? ap_const_lv8_FF: tmp_9_fu_185_p4.read());
}

void AXIS2GrayArray::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AXIS2GrayArray::thread_ret_V_fu_141_p1() {
    ret_V_fu_141_p1 = axis_src_data_V_0_data_out.read().range(8-1, 0);
}

void AXIS2GrayArray::thread_start_out() {
    start_out = real_start.read();
}

void AXIS2GrayArray::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AXIS2GrayArray::thread_tmp_10_fu_178_p3() {
    tmp_10_fu_178_p3 = grp_fu_208_p3.read().range(24, 24);
}

void AXIS2GrayArray::thread_tmp_9_fu_185_p4() {
    tmp_9_fu_185_p4 = grp_fu_208_p3.read().range(23, 16);
}

void AXIS2GrayArray::thread_xi_fu_135_p2() {
    xi_fu_135_p2 = (!xi_0_reg_106.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(xi_0_reg_106.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void AXIS2GrayArray::thread_yi_fu_123_p2() {
    yi_fu_123_p2 = (!yi_0_reg_95.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(yi_0_reg_95.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void AXIS2GrayArray::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln86_fu_117_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln87_fu_129_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln87_fu_129_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

