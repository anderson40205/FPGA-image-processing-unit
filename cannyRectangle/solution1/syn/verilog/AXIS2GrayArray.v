// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIS2GrayArray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        axis_in_TDATA,
        axis_in_TVALID,
        axis_in_TREADY,
        fifo1_din,
        fifo1_full_n,
        fifo1_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] axis_in_TDATA;
input   axis_in_TVALID;
output   axis_in_TREADY;
output  [7:0] fifo1_din;
input   fifo1_full_n;
output   fifo1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg fifo1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] axis_src_data_V_0_data_out;
wire    axis_src_data_V_0_vld_in;
wire    axis_src_data_V_0_vld_out;
wire    axis_src_data_V_0_ack_in;
reg    axis_src_data_V_0_ack_out;
reg   [23:0] axis_src_data_V_0_payload_A;
reg   [23:0] axis_src_data_V_0_payload_B;
reg    axis_src_data_V_0_sel_rd;
reg    axis_src_data_V_0_sel_wr;
wire    axis_src_data_V_0_sel;
wire    axis_src_data_V_0_load_A;
wire    axis_src_data_V_0_load_B;
reg   [1:0] axis_src_data_V_0_state;
wire    axis_src_data_V_0_state_cmp_full;
reg    axis_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln87_fu_129_p2;
reg    fifo1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln87_reg_235;
reg   [0:0] icmp_ln87_reg_235_pp0_iter1_reg;
reg   [10:0] xi_0_reg_106;
wire   [0:0] icmp_ln86_fu_117_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] yi_fu_123_p2;
reg   [10:0] yi_reg_230;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] xi_fu_135_p2;
wire   [22:0] mul_ln544_fu_202_p2;
reg   [22:0] mul_ln544_reg_244;
reg   [7:0] trunc_ln_reg_249;
reg   [7:0] tmp_8_reg_254;
wire   [7:0] phitmp318_fu_194_p3;
reg   [7:0] phitmp318_reg_259;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [10:0] yi_0_reg_95;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] ret_V_fu_141_p1;
wire   [22:0] grp_fu_218_p3;
wire   [24:0] grp_fu_208_p3;
wire   [0:0] tmp_10_fu_178_p3;
wire   [7:0] tmp_9_fu_185_p4;
wire   [14:0] mul_ln544_fu_202_p0;
wire   [7:0] mul_ln544_fu_202_p1;
wire   [16:0] grp_fu_208_p0;
wire   [7:0] grp_fu_208_p1;
wire   [22:0] grp_fu_208_p2;
wire   [15:0] grp_fu_218_p0;
wire   [7:0] grp_fu_218_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [24:0] grp_fu_208_p10;
wire   [24:0] grp_fu_208_p20;
wire   [22:0] grp_fu_218_p10;
wire   [22:0] mul_ln544_fu_202_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 axis_src_data_V_0_sel_rd = 1'b0;
#0 axis_src_data_V_0_sel_wr = 1'b0;
#0 axis_src_data_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

canny_edge_rectanbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
canny_edge_rectanbkb_U15(
    .din0(mul_ln544_fu_202_p0),
    .din1(mul_ln544_fu_202_p1),
    .dout(mul_ln544_fu_202_p2)
);

canny_edge_rectancud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 25 ))
canny_edge_rectancud_U16(
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .din2(grp_fu_208_p2),
    .dout(grp_fu_208_p3)
);

canny_edge_rectandEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
canny_edge_rectandEe_U17(
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .din2(mul_ln544_reg_244),
    .dout(grp_fu_218_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln86_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln86_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln86_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_src_data_V_0_ack_out == 1'b1) & (axis_src_data_V_0_vld_out == 1'b1))) begin
            axis_src_data_V_0_sel_rd <= ~axis_src_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_src_data_V_0_ack_in == 1'b1) & (axis_src_data_V_0_vld_in == 1'b1))) begin
            axis_src_data_V_0_sel_wr <= ~axis_src_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_src_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_src_data_V_0_state == 2'd2) & (axis_src_data_V_0_vld_in == 1'b0)) | ((axis_src_data_V_0_state == 2'd3) & (axis_src_data_V_0_vld_in == 1'b0) & (axis_src_data_V_0_ack_out == 1'b1)))) begin
            axis_src_data_V_0_state <= 2'd2;
        end else if ((((axis_src_data_V_0_state == 2'd1) & (axis_src_data_V_0_ack_out == 1'b0)) | ((axis_src_data_V_0_state == 2'd3) & (axis_src_data_V_0_ack_out == 1'b0) & (axis_src_data_V_0_vld_in == 1'b1)))) begin
            axis_src_data_V_0_state <= 2'd1;
        end else if (((~((axis_src_data_V_0_vld_in == 1'b0) & (axis_src_data_V_0_ack_out == 1'b1)) & ~((axis_src_data_V_0_ack_out == 1'b0) & (axis_src_data_V_0_vld_in == 1'b1)) & (axis_src_data_V_0_state == 2'd3)) | ((axis_src_data_V_0_state == 2'd1) & (axis_src_data_V_0_ack_out == 1'b1)) | ((axis_src_data_V_0_state == 2'd2) & (axis_src_data_V_0_vld_in == 1'b1)))) begin
            axis_src_data_V_0_state <= 2'd3;
        end else begin
            axis_src_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        xi_0_reg_106 <= 11'd0;
    end else if (((icmp_ln87_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xi_0_reg_106 <= xi_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        yi_0_reg_95 <= yi_reg_230;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        yi_0_reg_95 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_data_V_0_load_A == 1'b1)) begin
        axis_src_data_V_0_payload_A <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_src_data_V_0_load_B == 1'b1)) begin
        axis_src_data_V_0_payload_B <= axis_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln87_reg_235 <= icmp_ln87_fu_129_p2;
        icmp_ln87_reg_235_pp0_iter1_reg <= icmp_ln87_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln544_reg_244 <= mul_ln544_fu_202_p2;
        tmp_8_reg_254 <= {{axis_src_data_V_0_data_out[23:16]}};
        trunc_ln_reg_249 <= {{axis_src_data_V_0_data_out[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_235 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phitmp318_reg_259 <= phitmp318_fu_194_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        yi_reg_230 <= yi_fu_123_p2;
    end
end

always @ (*) begin
    if ((icmp_ln87_fu_129_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        axis_in_TDATA_blk_n = axis_src_data_V_0_state[1'd0];
    end else begin
        axis_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        axis_src_data_V_0_ack_out = 1'b1;
    end else begin
        axis_src_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_src_data_V_0_sel == 1'b1)) begin
        axis_src_data_V_0_data_out = axis_src_data_V_0_payload_B;
    end else begin
        axis_src_data_V_0_data_out = axis_src_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo1_blk_n = fifo1_full_n;
    end else begin
        fifo1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo1_write = 1'b1;
    end else begin
        fifo1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln86_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln87_fu_129_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln87_fu_129_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln87_fu_129_p2 == 1'd0) & (axis_src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln87_fu_129_p2 == 1'd0) & (axis_src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (fifo1_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln87_fu_129_p2 == 1'd0) & (axis_src_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln87_fu_129_p2 == 1'd0) & (axis_src_data_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln87_reg_235_pp0_iter1_reg == 1'd0) & (fifo1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign axis_in_TREADY = axis_src_data_V_0_state[1'd1];

assign axis_src_data_V_0_ack_in = axis_src_data_V_0_state[1'd1];

assign axis_src_data_V_0_load_A = (~axis_src_data_V_0_sel_wr & axis_src_data_V_0_state_cmp_full);

assign axis_src_data_V_0_load_B = (axis_src_data_V_0_state_cmp_full & axis_src_data_V_0_sel_wr);

assign axis_src_data_V_0_sel = axis_src_data_V_0_sel_rd;

assign axis_src_data_V_0_state_cmp_full = ((axis_src_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_src_data_V_0_vld_in = axis_in_TVALID;

assign axis_src_data_V_0_vld_out = axis_src_data_V_0_state[1'd0];

assign fifo1_din = phitmp318_reg_259;

assign grp_fu_208_p0 = 25'd38469;

assign grp_fu_208_p1 = grp_fu_208_p10;

assign grp_fu_208_p10 = trunc_ln_reg_249;

assign grp_fu_208_p2 = grp_fu_208_p20;

assign grp_fu_208_p20 = grp_fu_218_p3;

assign grp_fu_218_p0 = 23'd19595;

assign grp_fu_218_p1 = grp_fu_218_p10;

assign grp_fu_218_p10 = tmp_8_reg_254;

assign icmp_ln86_fu_117_p2 = ((yi_0_reg_95 == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_129_p2 = ((xi_0_reg_106 == 11'd1920) ? 1'b1 : 1'b0);

assign mul_ln544_fu_202_p0 = 23'd9437;

assign mul_ln544_fu_202_p1 = mul_ln544_fu_202_p10;

assign mul_ln544_fu_202_p10 = ret_V_fu_141_p1;

assign phitmp318_fu_194_p3 = ((tmp_10_fu_178_p3[0:0] === 1'b1) ? 8'd255 : tmp_9_fu_185_p4);

assign ret_V_fu_141_p1 = axis_src_data_V_0_data_out[7:0];

assign start_out = real_start;

assign tmp_10_fu_178_p3 = grp_fu_208_p3[32'd24];

assign tmp_9_fu_185_p4 = {{grp_fu_208_p3[23:16]}};

assign xi_fu_135_p2 = (xi_0_reg_106 + 11'd1);

assign yi_fu_123_p2 = (yi_0_reg_95 + 11'd1);

endmodule //AXIS2GrayArray
