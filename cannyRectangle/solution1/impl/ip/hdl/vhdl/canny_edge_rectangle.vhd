-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_edge_rectangle is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    axis_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    axis_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    axis_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    bh : IN STD_LOGIC_VECTOR (7 downto 0);
    bl : IN STD_LOGIC_VECTOR (7 downto 0);
    axis_in_TVALID : IN STD_LOGIC;
    axis_in_TREADY : OUT STD_LOGIC;
    axis_out_TVALID : OUT STD_LOGIC;
    axis_out_TREADY : IN STD_LOGIC );
end;


architecture behav of canny_edge_rectangle is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "canny_edge_rectangle,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=11.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.648000,HLS_SYN_LAT=2103846,HLS_SYN_TPT=2103842,HLS_SYN_MEM=15,HLS_SYN_DSP=5,HLS_SYN_FF=4273,HLS_SYN_LUT=6011,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_start : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_done : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_continue : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_idle : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_ready : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_start_out : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_start_write : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_bh_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_1_2_U0_bh_out_write : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_bl_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_1_2_U0_bl_out_write : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_ap_start : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_start_full_n : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_ap_done : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_ap_continue : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_ap_idle : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_ap_ready : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_start_out : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_start_write : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bh_read : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bl_read : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bh_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_2_U0_bh_out_write : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bh_out1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_2_U0_bh_out1_write : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bl_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_2_U0_bl_out_write : STD_LOGIC;
    signal canny_edge_rectangle_2_U0_bl_out2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edge_rectangle_2_U0_bl_out2_write : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_bh_read : STD_LOGIC;
    signal Block_proc_U0_hist_hthr : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc_U0_hist_hthr_ap_vld : STD_LOGIC;
    signal Block_proc_U0_bl_read : STD_LOGIC;
    signal Block_proc_U0_hist_lthr : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc_U0_hist_lthr_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_start : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_done : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_continue : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_idle : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_ready : STD_LOGIC;
    signal AXIS2GrayArray_U0_start_out : STD_LOGIC;
    signal AXIS2GrayArray_U0_start_write : STD_LOGIC;
    signal AXIS2GrayArray_U0_axis_in_TREADY : STD_LOGIC;
    signal AXIS2GrayArray_U0_fifo1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIS2GrayArray_U0_fifo1_write : STD_LOGIC;
    signal GaussianBlur_U0_ap_start : STD_LOGIC;
    signal GaussianBlur_U0_ap_done : STD_LOGIC;
    signal GaussianBlur_U0_ap_continue : STD_LOGIC;
    signal GaussianBlur_U0_ap_idle : STD_LOGIC;
    signal GaussianBlur_U0_ap_ready : STD_LOGIC;
    signal GaussianBlur_U0_start_out : STD_LOGIC;
    signal GaussianBlur_U0_start_write : STD_LOGIC;
    signal GaussianBlur_U0_fifo1_read : STD_LOGIC;
    signal GaussianBlur_U0_fifo2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal GaussianBlur_U0_fifo2_write : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_ap_start : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_ap_done : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_ap_continue : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_ap_idle : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_ap_ready : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_start_out : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_start_write : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_fifo2_read : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_fifo3_value_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Sobel_1920u_1080u_U0_fifo3_value_write : STD_LOGIC;
    signal Sobel_1920u_1080u_U0_fifo3_grad_din : STD_LOGIC_VECTOR (1 downto 0);
    signal Sobel_1920u_1080u_U0_fifo3_grad_write : STD_LOGIC;
    signal NonMaxSuppression_U0_ap_start : STD_LOGIC;
    signal NonMaxSuppression_U0_ap_done : STD_LOGIC;
    signal NonMaxSuppression_U0_ap_continue : STD_LOGIC;
    signal NonMaxSuppression_U0_ap_idle : STD_LOGIC;
    signal NonMaxSuppression_U0_ap_ready : STD_LOGIC;
    signal NonMaxSuppression_U0_start_out : STD_LOGIC;
    signal NonMaxSuppression_U0_start_write : STD_LOGIC;
    signal NonMaxSuppression_U0_fifo3_value_read : STD_LOGIC;
    signal NonMaxSuppression_U0_fifo3_grad_read : STD_LOGIC;
    signal NonMaxSuppression_U0_fifo4_din : STD_LOGIC_VECTOR (7 downto 0);
    signal NonMaxSuppression_U0_fifo4_write : STD_LOGIC;
    signal ZeroPadding_U0_ap_start : STD_LOGIC;
    signal ZeroPadding_U0_ap_done : STD_LOGIC;
    signal ZeroPadding_U0_ap_continue : STD_LOGIC;
    signal ZeroPadding_U0_ap_idle : STD_LOGIC;
    signal ZeroPadding_U0_ap_ready : STD_LOGIC;
    signal ZeroPadding_U0_fifo4_read : STD_LOGIC;
    signal ZeroPadding_U0_fifo5_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ZeroPadding_U0_fifo5_write : STD_LOGIC;
    signal HystThreshold_U0_ap_start : STD_LOGIC;
    signal HystThreshold_U0_ap_done : STD_LOGIC;
    signal HystThreshold_U0_ap_continue : STD_LOGIC;
    signal HystThreshold_U0_ap_idle : STD_LOGIC;
    signal HystThreshold_U0_ap_ready : STD_LOGIC;
    signal HystThreshold_U0_start_out : STD_LOGIC;
    signal HystThreshold_U0_start_write : STD_LOGIC;
    signal HystThreshold_U0_hthr_read : STD_LOGIC;
    signal HystThreshold_U0_lthr_read : STD_LOGIC;
    signal HystThreshold_U0_fifo5_read : STD_LOGIC;
    signal HystThreshold_U0_fifo6_din : STD_LOGIC_VECTOR (7 downto 0);
    signal HystThreshold_U0_fifo6_write : STD_LOGIC;
    signal HystThresholdComp_U0_ap_start : STD_LOGIC;
    signal HystThresholdComp_U0_ap_done : STD_LOGIC;
    signal HystThresholdComp_U0_ap_continue : STD_LOGIC;
    signal HystThresholdComp_U0_ap_idle : STD_LOGIC;
    signal HystThresholdComp_U0_ap_ready : STD_LOGIC;
    signal HystThresholdComp_U0_start_out : STD_LOGIC;
    signal HystThresholdComp_U0_start_write : STD_LOGIC;
    signal HystThresholdComp_U0_fifo6_read : STD_LOGIC;
    signal HystThresholdComp_U0_fifo7_din : STD_LOGIC_VECTOR (7 downto 0);
    signal HystThresholdComp_U0_fifo7_write : STD_LOGIC;
    signal GrayArray2AXIS_U0_ap_start : STD_LOGIC;
    signal GrayArray2AXIS_U0_ap_done : STD_LOGIC;
    signal GrayArray2AXIS_U0_ap_continue : STD_LOGIC;
    signal GrayArray2AXIS_U0_ap_idle : STD_LOGIC;
    signal GrayArray2AXIS_U0_ap_ready : STD_LOGIC;
    signal GrayArray2AXIS_U0_axis_out_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal GrayArray2AXIS_U0_axis_out_TVALID : STD_LOGIC;
    signal GrayArray2AXIS_U0_axis_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal GrayArray2AXIS_U0_fifo7_read : STD_LOGIC;
    signal bh_c2_full_n : STD_LOGIC;
    signal bh_c2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bh_c2_empty_n : STD_LOGIC;
    signal bl_c3_full_n : STD_LOGIC;
    signal bl_c3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bl_c3_empty_n : STD_LOGIC;
    signal bh_c_full_n : STD_LOGIC;
    signal bh_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bh_c_empty_n : STD_LOGIC;
    signal bh_c1_full_n : STD_LOGIC;
    signal bh_c1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bh_c1_empty_n : STD_LOGIC;
    signal bl_c_full_n : STD_LOGIC;
    signal bl_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bl_c_empty_n : STD_LOGIC;
    signal bl_c2_full_n : STD_LOGIC;
    signal bl_c2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bl_c2_empty_n : STD_LOGIC;
    signal fifo1_full_n : STD_LOGIC;
    signal fifo1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo1_empty_n : STD_LOGIC;
    signal fifo2_full_n : STD_LOGIC;
    signal fifo2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo2_empty_n : STD_LOGIC;
    signal fifo3_value_full_n : STD_LOGIC;
    signal fifo3_value_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo3_value_empty_n : STD_LOGIC;
    signal fifo3_grad_full_n : STD_LOGIC;
    signal fifo3_grad_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal fifo3_grad_empty_n : STD_LOGIC;
    signal fifo4_full_n : STD_LOGIC;
    signal fifo4_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo4_empty_n : STD_LOGIC;
    signal fifo5_full_n : STD_LOGIC;
    signal fifo5_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo5_empty_n : STD_LOGIC;
    signal fifo6_full_n : STD_LOGIC;
    signal fifo6_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo6_empty_n : STD_LOGIC;
    signal fifo7_full_n : STD_LOGIC;
    signal fifo7_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo7_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_canny_edge_rectangle_1_2_U0_ap_ready : STD_LOGIC;
    signal canny_edge_rectangle_1_2_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIS2GrayArray_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIS2GrayArray_U0_ap_ready : STD_LOGIC;
    signal AXIS2GrayArray_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_canny_edge_rectangle_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_canny_edge_rectangle_2_U0_full_n : STD_LOGIC;
    signal start_for_canny_edge_rectangle_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_canny_edge_rectangle_2_U0_empty_n : STD_LOGIC;
    signal start_for_Block_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_empty_n : STD_LOGIC;
    signal start_for_HystThreshold_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HystThreshold_U0_full_n : STD_LOGIC;
    signal start_for_HystThreshold_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HystThreshold_U0_empty_n : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_GaussianBlur_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_U0_full_n : STD_LOGIC;
    signal start_for_GaussianBlur_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_1920u_1080u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1920u_1080u_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_1920u_1080u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1920u_1080u_U0_empty_n : STD_LOGIC;
    signal start_for_NonMaxSuppression_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_NonMaxSuppression_U0_full_n : STD_LOGIC;
    signal start_for_NonMaxSuppression_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_NonMaxSuppression_U0_empty_n : STD_LOGIC;
    signal start_for_ZeroPadding_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ZeroPadding_U0_full_n : STD_LOGIC;
    signal start_for_ZeroPadding_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ZeroPadding_U0_empty_n : STD_LOGIC;
    signal ZeroPadding_U0_start_full_n : STD_LOGIC;
    signal ZeroPadding_U0_start_write : STD_LOGIC;
    signal start_for_HystThresholdComp_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HystThresholdComp_U0_full_n : STD_LOGIC;
    signal start_for_HystThresholdComp_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HystThresholdComp_U0_empty_n : STD_LOGIC;
    signal start_for_GrayArray2AXIS_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GrayArray2AXIS_U0_full_n : STD_LOGIC;
    signal start_for_GrayArray2AXIS_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GrayArray2AXIS_U0_empty_n : STD_LOGIC;
    signal GrayArray2AXIS_U0_start_full_n : STD_LOGIC;
    signal GrayArray2AXIS_U0_start_write : STD_LOGIC;

    component canny_edge_rectangle_1_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        bh : IN STD_LOGIC_VECTOR (7 downto 0);
        bl : IN STD_LOGIC_VECTOR (7 downto 0);
        bh_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bh_out_full_n : IN STD_LOGIC;
        bh_out_write : OUT STD_LOGIC;
        bl_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl_out_full_n : IN STD_LOGIC;
        bl_out_write : OUT STD_LOGIC );
    end component;


    component canny_edge_rectangle_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        bh_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bh_empty_n : IN STD_LOGIC;
        bh_read : OUT STD_LOGIC;
        bl_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bl_empty_n : IN STD_LOGIC;
        bl_read : OUT STD_LOGIC;
        bh_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bh_out_full_n : IN STD_LOGIC;
        bh_out_write : OUT STD_LOGIC;
        bh_out1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bh_out1_full_n : IN STD_LOGIC;
        bh_out1_write : OUT STD_LOGIC;
        bl_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl_out_full_n : IN STD_LOGIC;
        bl_out_write : OUT STD_LOGIC;
        bl_out2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        bl_out2_full_n : IN STD_LOGIC;
        bl_out2_write : OUT STD_LOGIC );
    end component;


    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bh_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bh_empty_n : IN STD_LOGIC;
        bh_read : OUT STD_LOGIC;
        hist_hthr : OUT STD_LOGIC_VECTOR (7 downto 0);
        hist_hthr_ap_vld : OUT STD_LOGIC;
        bl_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        bl_empty_n : IN STD_LOGIC;
        bl_read : OUT STD_LOGIC;
        hist_lthr : OUT STD_LOGIC_VECTOR (7 downto 0);
        hist_lthr_ap_vld : OUT STD_LOGIC );
    end component;


    component AXIS2GrayArray IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        axis_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        axis_in_TVALID : IN STD_LOGIC;
        axis_in_TREADY : OUT STD_LOGIC;
        fifo1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo1_full_n : IN STD_LOGIC;
        fifo1_write : OUT STD_LOGIC );
    end component;


    component GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo1_empty_n : IN STD_LOGIC;
        fifo1_read : OUT STD_LOGIC;
        fifo2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo2_full_n : IN STD_LOGIC;
        fifo2_write : OUT STD_LOGIC );
    end component;


    component Sobel_1920u_1080u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo2_empty_n : IN STD_LOGIC;
        fifo2_read : OUT STD_LOGIC;
        fifo3_value_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo3_value_full_n : IN STD_LOGIC;
        fifo3_value_write : OUT STD_LOGIC;
        fifo3_grad_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        fifo3_grad_full_n : IN STD_LOGIC;
        fifo3_grad_write : OUT STD_LOGIC );
    end component;


    component NonMaxSuppression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo3_value_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo3_value_empty_n : IN STD_LOGIC;
        fifo3_value_read : OUT STD_LOGIC;
        fifo3_grad_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        fifo3_grad_empty_n : IN STD_LOGIC;
        fifo3_grad_read : OUT STD_LOGIC;
        fifo4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo4_full_n : IN STD_LOGIC;
        fifo4_write : OUT STD_LOGIC );
    end component;


    component ZeroPadding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo4_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo4_empty_n : IN STD_LOGIC;
        fifo4_read : OUT STD_LOGIC;
        fifo5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo5_full_n : IN STD_LOGIC;
        fifo5_write : OUT STD_LOGIC );
    end component;


    component HystThreshold IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        hthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        hthr_empty_n : IN STD_LOGIC;
        hthr_read : OUT STD_LOGIC;
        lthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        lthr_empty_n : IN STD_LOGIC;
        lthr_read : OUT STD_LOGIC;
        fifo5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo5_empty_n : IN STD_LOGIC;
        fifo5_read : OUT STD_LOGIC;
        fifo6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo6_full_n : IN STD_LOGIC;
        fifo6_write : OUT STD_LOGIC );
    end component;


    component HystThresholdComp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo6_empty_n : IN STD_LOGIC;
        fifo6_read : OUT STD_LOGIC;
        fifo7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        fifo7_full_n : IN STD_LOGIC;
        fifo7_write : OUT STD_LOGIC );
    end component;


    component GrayArray2AXIS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        axis_out_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        axis_out_TVALID : OUT STD_LOGIC;
        axis_out_TREADY : IN STD_LOGIC;
        axis_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        fifo7_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        fifo7_empty_n : IN STD_LOGIC;
        fifo7_read : OUT STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_canny_eocq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_ppcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_HystThrqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_GaussiarcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_1sc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_NonMaxStde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ZeroPadudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_HystThrvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_GrayArrwdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_edge_rectangle_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        hist_hthr : IN STD_LOGIC_VECTOR (7 downto 0);
        hist_hthr_ap_vld : IN STD_LOGIC;
        hist_lthr : IN STD_LOGIC_VECTOR (7 downto 0);
        hist_lthr_ap_vld : IN STD_LOGIC );
    end component;



begin
    canny_edge_rectangle_AXILiteS_s_axi_U : component canny_edge_rectangle_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        hist_hthr => Block_proc_U0_hist_hthr,
        hist_hthr_ap_vld => Block_proc_U0_hist_hthr_ap_vld,
        hist_lthr => Block_proc_U0_hist_lthr,
        hist_lthr_ap_vld => Block_proc_U0_hist_lthr_ap_vld);

    canny_edge_rectangle_1_2_U0 : component canny_edge_rectangle_1_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_edge_rectangle_1_2_U0_ap_start,
        start_full_n => start_for_canny_edge_rectangle_2_U0_full_n,
        ap_done => canny_edge_rectangle_1_2_U0_ap_done,
        ap_continue => canny_edge_rectangle_1_2_U0_ap_continue,
        ap_idle => canny_edge_rectangle_1_2_U0_ap_idle,
        ap_ready => canny_edge_rectangle_1_2_U0_ap_ready,
        start_out => canny_edge_rectangle_1_2_U0_start_out,
        start_write => canny_edge_rectangle_1_2_U0_start_write,
        bh => bh,
        bl => bl,
        bh_out_din => canny_edge_rectangle_1_2_U0_bh_out_din,
        bh_out_full_n => bh_c2_full_n,
        bh_out_write => canny_edge_rectangle_1_2_U0_bh_out_write,
        bl_out_din => canny_edge_rectangle_1_2_U0_bl_out_din,
        bl_out_full_n => bl_c3_full_n,
        bl_out_write => canny_edge_rectangle_1_2_U0_bl_out_write);

    canny_edge_rectangle_2_U0 : component canny_edge_rectangle_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_edge_rectangle_2_U0_ap_start,
        start_full_n => canny_edge_rectangle_2_U0_start_full_n,
        ap_done => canny_edge_rectangle_2_U0_ap_done,
        ap_continue => canny_edge_rectangle_2_U0_ap_continue,
        ap_idle => canny_edge_rectangle_2_U0_ap_idle,
        ap_ready => canny_edge_rectangle_2_U0_ap_ready,
        start_out => canny_edge_rectangle_2_U0_start_out,
        start_write => canny_edge_rectangle_2_U0_start_write,
        bh_dout => bh_c2_dout,
        bh_empty_n => bh_c2_empty_n,
        bh_read => canny_edge_rectangle_2_U0_bh_read,
        bl_dout => bl_c3_dout,
        bl_empty_n => bl_c3_empty_n,
        bl_read => canny_edge_rectangle_2_U0_bl_read,
        bh_out_din => canny_edge_rectangle_2_U0_bh_out_din,
        bh_out_full_n => bh_c_full_n,
        bh_out_write => canny_edge_rectangle_2_U0_bh_out_write,
        bh_out1_din => canny_edge_rectangle_2_U0_bh_out1_din,
        bh_out1_full_n => bh_c1_full_n,
        bh_out1_write => canny_edge_rectangle_2_U0_bh_out1_write,
        bl_out_din => canny_edge_rectangle_2_U0_bl_out_din,
        bl_out_full_n => bl_c_full_n,
        bl_out_write => canny_edge_rectangle_2_U0_bl_out_write,
        bl_out2_din => canny_edge_rectangle_2_U0_bl_out2_din,
        bl_out2_full_n => bl_c2_full_n,
        bl_out2_write => canny_edge_rectangle_2_U0_bl_out2_write);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        bh_dout => bh_c_dout,
        bh_empty_n => bh_c_empty_n,
        bh_read => Block_proc_U0_bh_read,
        hist_hthr => Block_proc_U0_hist_hthr,
        hist_hthr_ap_vld => Block_proc_U0_hist_hthr_ap_vld,
        bl_dout => bl_c_dout,
        bl_empty_n => bl_c_empty_n,
        bl_read => Block_proc_U0_bl_read,
        hist_lthr => Block_proc_U0_hist_lthr,
        hist_lthr_ap_vld => Block_proc_U0_hist_lthr_ap_vld);

    AXIS2GrayArray_U0 : component AXIS2GrayArray
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIS2GrayArray_U0_ap_start,
        start_full_n => start_for_GaussianBlur_U0_full_n,
        ap_done => AXIS2GrayArray_U0_ap_done,
        ap_continue => AXIS2GrayArray_U0_ap_continue,
        ap_idle => AXIS2GrayArray_U0_ap_idle,
        ap_ready => AXIS2GrayArray_U0_ap_ready,
        start_out => AXIS2GrayArray_U0_start_out,
        start_write => AXIS2GrayArray_U0_start_write,
        axis_in_TDATA => axis_in_TDATA,
        axis_in_TVALID => axis_in_TVALID,
        axis_in_TREADY => AXIS2GrayArray_U0_axis_in_TREADY,
        fifo1_din => AXIS2GrayArray_U0_fifo1_din,
        fifo1_full_n => fifo1_full_n,
        fifo1_write => AXIS2GrayArray_U0_fifo1_write);

    GaussianBlur_U0 : component GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => GaussianBlur_U0_ap_start,
        start_full_n => start_for_Sobel_1920u_1080u_U0_full_n,
        ap_done => GaussianBlur_U0_ap_done,
        ap_continue => GaussianBlur_U0_ap_continue,
        ap_idle => GaussianBlur_U0_ap_idle,
        ap_ready => GaussianBlur_U0_ap_ready,
        start_out => GaussianBlur_U0_start_out,
        start_write => GaussianBlur_U0_start_write,
        fifo1_dout => fifo1_dout,
        fifo1_empty_n => fifo1_empty_n,
        fifo1_read => GaussianBlur_U0_fifo1_read,
        fifo2_din => GaussianBlur_U0_fifo2_din,
        fifo2_full_n => fifo2_full_n,
        fifo2_write => GaussianBlur_U0_fifo2_write);

    Sobel_1920u_1080u_U0 : component Sobel_1920u_1080u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_1920u_1080u_U0_ap_start,
        start_full_n => start_for_NonMaxSuppression_U0_full_n,
        ap_done => Sobel_1920u_1080u_U0_ap_done,
        ap_continue => Sobel_1920u_1080u_U0_ap_continue,
        ap_idle => Sobel_1920u_1080u_U0_ap_idle,
        ap_ready => Sobel_1920u_1080u_U0_ap_ready,
        start_out => Sobel_1920u_1080u_U0_start_out,
        start_write => Sobel_1920u_1080u_U0_start_write,
        fifo2_dout => fifo2_dout,
        fifo2_empty_n => fifo2_empty_n,
        fifo2_read => Sobel_1920u_1080u_U0_fifo2_read,
        fifo3_value_din => Sobel_1920u_1080u_U0_fifo3_value_din,
        fifo3_value_full_n => fifo3_value_full_n,
        fifo3_value_write => Sobel_1920u_1080u_U0_fifo3_value_write,
        fifo3_grad_din => Sobel_1920u_1080u_U0_fifo3_grad_din,
        fifo3_grad_full_n => fifo3_grad_full_n,
        fifo3_grad_write => Sobel_1920u_1080u_U0_fifo3_grad_write);

    NonMaxSuppression_U0 : component NonMaxSuppression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => NonMaxSuppression_U0_ap_start,
        start_full_n => start_for_ZeroPadding_U0_full_n,
        ap_done => NonMaxSuppression_U0_ap_done,
        ap_continue => NonMaxSuppression_U0_ap_continue,
        ap_idle => NonMaxSuppression_U0_ap_idle,
        ap_ready => NonMaxSuppression_U0_ap_ready,
        start_out => NonMaxSuppression_U0_start_out,
        start_write => NonMaxSuppression_U0_start_write,
        fifo3_value_dout => fifo3_value_dout,
        fifo3_value_empty_n => fifo3_value_empty_n,
        fifo3_value_read => NonMaxSuppression_U0_fifo3_value_read,
        fifo3_grad_dout => fifo3_grad_dout,
        fifo3_grad_empty_n => fifo3_grad_empty_n,
        fifo3_grad_read => NonMaxSuppression_U0_fifo3_grad_read,
        fifo4_din => NonMaxSuppression_U0_fifo4_din,
        fifo4_full_n => fifo4_full_n,
        fifo4_write => NonMaxSuppression_U0_fifo4_write);

    ZeroPadding_U0 : component ZeroPadding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ZeroPadding_U0_ap_start,
        ap_done => ZeroPadding_U0_ap_done,
        ap_continue => ZeroPadding_U0_ap_continue,
        ap_idle => ZeroPadding_U0_ap_idle,
        ap_ready => ZeroPadding_U0_ap_ready,
        fifo4_dout => fifo4_dout,
        fifo4_empty_n => fifo4_empty_n,
        fifo4_read => ZeroPadding_U0_fifo4_read,
        fifo5_din => ZeroPadding_U0_fifo5_din,
        fifo5_full_n => fifo5_full_n,
        fifo5_write => ZeroPadding_U0_fifo5_write);

    HystThreshold_U0 : component HystThreshold
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HystThreshold_U0_ap_start,
        start_full_n => start_for_HystThresholdComp_U0_full_n,
        ap_done => HystThreshold_U0_ap_done,
        ap_continue => HystThreshold_U0_ap_continue,
        ap_idle => HystThreshold_U0_ap_idle,
        ap_ready => HystThreshold_U0_ap_ready,
        start_out => HystThreshold_U0_start_out,
        start_write => HystThreshold_U0_start_write,
        hthr_dout => bh_c1_dout,
        hthr_empty_n => bh_c1_empty_n,
        hthr_read => HystThreshold_U0_hthr_read,
        lthr_dout => bl_c2_dout,
        lthr_empty_n => bl_c2_empty_n,
        lthr_read => HystThreshold_U0_lthr_read,
        fifo5_dout => fifo5_dout,
        fifo5_empty_n => fifo5_empty_n,
        fifo5_read => HystThreshold_U0_fifo5_read,
        fifo6_din => HystThreshold_U0_fifo6_din,
        fifo6_full_n => fifo6_full_n,
        fifo6_write => HystThreshold_U0_fifo6_write);

    HystThresholdComp_U0 : component HystThresholdComp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HystThresholdComp_U0_ap_start,
        start_full_n => start_for_GrayArray2AXIS_U0_full_n,
        ap_done => HystThresholdComp_U0_ap_done,
        ap_continue => HystThresholdComp_U0_ap_continue,
        ap_idle => HystThresholdComp_U0_ap_idle,
        ap_ready => HystThresholdComp_U0_ap_ready,
        start_out => HystThresholdComp_U0_start_out,
        start_write => HystThresholdComp_U0_start_write,
        fifo6_dout => fifo6_dout,
        fifo6_empty_n => fifo6_empty_n,
        fifo6_read => HystThresholdComp_U0_fifo6_read,
        fifo7_din => HystThresholdComp_U0_fifo7_din,
        fifo7_full_n => fifo7_full_n,
        fifo7_write => HystThresholdComp_U0_fifo7_write);

    GrayArray2AXIS_U0 : component GrayArray2AXIS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => GrayArray2AXIS_U0_ap_start,
        ap_done => GrayArray2AXIS_U0_ap_done,
        ap_continue => GrayArray2AXIS_U0_ap_continue,
        ap_idle => GrayArray2AXIS_U0_ap_idle,
        ap_ready => GrayArray2AXIS_U0_ap_ready,
        axis_out_TDATA => GrayArray2AXIS_U0_axis_out_TDATA,
        axis_out_TVALID => GrayArray2AXIS_U0_axis_out_TVALID,
        axis_out_TREADY => axis_out_TREADY,
        axis_out_TLAST => GrayArray2AXIS_U0_axis_out_TLAST,
        fifo7_dout => fifo7_dout,
        fifo7_empty_n => fifo7_empty_n,
        fifo7_read => GrayArray2AXIS_U0_fifo7_read);

    bh_c2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_1_2_U0_bh_out_din,
        if_full_n => bh_c2_full_n,
        if_write => canny_edge_rectangle_1_2_U0_bh_out_write,
        if_dout => bh_c2_dout,
        if_empty_n => bh_c2_empty_n,
        if_read => canny_edge_rectangle_2_U0_bh_read);

    bl_c3_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_1_2_U0_bl_out_din,
        if_full_n => bl_c3_full_n,
        if_write => canny_edge_rectangle_1_2_U0_bl_out_write,
        if_dout => bl_c3_dout,
        if_empty_n => bl_c3_empty_n,
        if_read => canny_edge_rectangle_2_U0_bl_read);

    bh_c_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_2_U0_bh_out_din,
        if_full_n => bh_c_full_n,
        if_write => canny_edge_rectangle_2_U0_bh_out_write,
        if_dout => bh_c_dout,
        if_empty_n => bh_c_empty_n,
        if_read => Block_proc_U0_bh_read);

    bh_c1_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_2_U0_bh_out1_din,
        if_full_n => bh_c1_full_n,
        if_write => canny_edge_rectangle_2_U0_bh_out1_write,
        if_dout => bh_c1_dout,
        if_empty_n => bh_c1_empty_n,
        if_read => HystThreshold_U0_hthr_read);

    bl_c_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_2_U0_bl_out_din,
        if_full_n => bl_c_full_n,
        if_write => canny_edge_rectangle_2_U0_bl_out_write,
        if_dout => bl_c_dout,
        if_empty_n => bl_c_empty_n,
        if_read => Block_proc_U0_bl_read);

    bl_c2_U : component fifo_w8_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => canny_edge_rectangle_2_U0_bl_out2_din,
        if_full_n => bl_c2_full_n,
        if_write => canny_edge_rectangle_2_U0_bl_out2_write,
        if_dout => bl_c2_dout,
        if_empty_n => bl_c2_empty_n,
        if_read => HystThreshold_U0_lthr_read);

    fifo1_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIS2GrayArray_U0_fifo1_din,
        if_full_n => fifo1_full_n,
        if_write => AXIS2GrayArray_U0_fifo1_write,
        if_dout => fifo1_dout,
        if_empty_n => fifo1_empty_n,
        if_read => GaussianBlur_U0_fifo1_read);

    fifo2_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => GaussianBlur_U0_fifo2_din,
        if_full_n => fifo2_full_n,
        if_write => GaussianBlur_U0_fifo2_write,
        if_dout => fifo2_dout,
        if_empty_n => fifo2_empty_n,
        if_read => Sobel_1920u_1080u_U0_fifo2_read);

    fifo3_value_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_1920u_1080u_U0_fifo3_value_din,
        if_full_n => fifo3_value_full_n,
        if_write => Sobel_1920u_1080u_U0_fifo3_value_write,
        if_dout => fifo3_value_dout,
        if_empty_n => fifo3_value_empty_n,
        if_read => NonMaxSuppression_U0_fifo3_value_read);

    fifo3_grad_U : component fifo_w2_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_1920u_1080u_U0_fifo3_grad_din,
        if_full_n => fifo3_grad_full_n,
        if_write => Sobel_1920u_1080u_U0_fifo3_grad_write,
        if_dout => fifo3_grad_dout,
        if_empty_n => fifo3_grad_empty_n,
        if_read => NonMaxSuppression_U0_fifo3_grad_read);

    fifo4_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => NonMaxSuppression_U0_fifo4_din,
        if_full_n => fifo4_full_n,
        if_write => NonMaxSuppression_U0_fifo4_write,
        if_dout => fifo4_dout,
        if_empty_n => fifo4_empty_n,
        if_read => ZeroPadding_U0_fifo4_read);

    fifo5_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ZeroPadding_U0_fifo5_din,
        if_full_n => fifo5_full_n,
        if_write => ZeroPadding_U0_fifo5_write,
        if_dout => fifo5_dout,
        if_empty_n => fifo5_empty_n,
        if_read => HystThreshold_U0_fifo5_read);

    fifo6_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => HystThreshold_U0_fifo6_din,
        if_full_n => fifo6_full_n,
        if_write => HystThreshold_U0_fifo6_write,
        if_dout => fifo6_dout,
        if_empty_n => fifo6_empty_n,
        if_read => HystThresholdComp_U0_fifo6_read);

    fifo7_U : component fifo_w8_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => HystThresholdComp_U0_fifo7_din,
        if_full_n => fifo7_full_n,
        if_write => HystThresholdComp_U0_fifo7_write,
        if_dout => fifo7_dout,
        if_empty_n => fifo7_empty_n,
        if_read => GrayArray2AXIS_U0_fifo7_read);

    start_for_canny_eocq_U : component start_for_canny_eocq
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_canny_edge_rectangle_2_U0_din,
        if_full_n => start_for_canny_edge_rectangle_2_U0_full_n,
        if_write => canny_edge_rectangle_1_2_U0_start_write,
        if_dout => start_for_canny_edge_rectangle_2_U0_dout,
        if_empty_n => start_for_canny_edge_rectangle_2_U0_empty_n,
        if_read => canny_edge_rectangle_2_U0_ap_ready);

    start_for_Block_ppcA_U : component start_for_Block_ppcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_proc_U0_din,
        if_full_n => start_for_Block_proc_U0_full_n,
        if_write => canny_edge_rectangle_2_U0_start_write,
        if_dout => start_for_Block_proc_U0_dout,
        if_empty_n => start_for_Block_proc_U0_empty_n,
        if_read => Block_proc_U0_ap_ready);

    start_for_HystThrqcK_U : component start_for_HystThrqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_HystThreshold_U0_din,
        if_full_n => start_for_HystThreshold_U0_full_n,
        if_write => canny_edge_rectangle_2_U0_start_write,
        if_dout => start_for_HystThreshold_U0_dout,
        if_empty_n => start_for_HystThreshold_U0_empty_n,
        if_read => HystThreshold_U0_ap_ready);

    start_for_GaussiarcU_U : component start_for_GaussiarcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_GaussianBlur_U0_din,
        if_full_n => start_for_GaussianBlur_U0_full_n,
        if_write => AXIS2GrayArray_U0_start_write,
        if_dout => start_for_GaussianBlur_U0_dout,
        if_empty_n => start_for_GaussianBlur_U0_empty_n,
        if_read => GaussianBlur_U0_ap_ready);

    start_for_Sobel_1sc4_U : component start_for_Sobel_1sc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_1920u_1080u_U0_din,
        if_full_n => start_for_Sobel_1920u_1080u_U0_full_n,
        if_write => GaussianBlur_U0_start_write,
        if_dout => start_for_Sobel_1920u_1080u_U0_dout,
        if_empty_n => start_for_Sobel_1920u_1080u_U0_empty_n,
        if_read => Sobel_1920u_1080u_U0_ap_ready);

    start_for_NonMaxStde_U : component start_for_NonMaxStde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_NonMaxSuppression_U0_din,
        if_full_n => start_for_NonMaxSuppression_U0_full_n,
        if_write => Sobel_1920u_1080u_U0_start_write,
        if_dout => start_for_NonMaxSuppression_U0_dout,
        if_empty_n => start_for_NonMaxSuppression_U0_empty_n,
        if_read => NonMaxSuppression_U0_ap_ready);

    start_for_ZeroPadudo_U : component start_for_ZeroPadudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ZeroPadding_U0_din,
        if_full_n => start_for_ZeroPadding_U0_full_n,
        if_write => NonMaxSuppression_U0_start_write,
        if_dout => start_for_ZeroPadding_U0_dout,
        if_empty_n => start_for_ZeroPadding_U0_empty_n,
        if_read => ZeroPadding_U0_ap_ready);

    start_for_HystThrvdy_U : component start_for_HystThrvdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_HystThresholdComp_U0_din,
        if_full_n => start_for_HystThresholdComp_U0_full_n,
        if_write => HystThreshold_U0_start_write,
        if_dout => start_for_HystThresholdComp_U0_dout,
        if_empty_n => start_for_HystThresholdComp_U0_empty_n,
        if_read => HystThresholdComp_U0_ap_ready);

    start_for_GrayArrwdI_U : component start_for_GrayArrwdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_GrayArray2AXIS_U0_din,
        if_full_n => start_for_GrayArray2AXIS_U0_full_n,
        if_write => HystThresholdComp_U0_start_write,
        if_dout => start_for_GrayArray2AXIS_U0_dout,
        if_empty_n => start_for_GrayArray2AXIS_U0_empty_n,
        if_read => GrayArray2AXIS_U0_ap_ready);





    ap_sync_reg_AXIS2GrayArray_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIS2GrayArray_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIS2GrayArray_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIS2GrayArray_U0_ap_ready <= ap_sync_AXIS2GrayArray_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready <= ap_sync_canny_edge_rectangle_1_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIS2GrayArray_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIS2GrayArray_U0_ap_ready))) then 
                AXIS2GrayArray_U0_ap_ready_count <= std_logic_vector(unsigned(AXIS2GrayArray_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIS2GrayArray_U0_ap_ready))) then 
                AXIS2GrayArray_U0_ap_ready_count <= std_logic_vector(unsigned(AXIS2GrayArray_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    canny_edge_rectangle_1_2_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((canny_edge_rectangle_1_2_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                canny_edge_rectangle_1_2_U0_ap_ready_count <= std_logic_vector(unsigned(canny_edge_rectangle_1_2_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (canny_edge_rectangle_1_2_U0_ap_ready = ap_const_logic_1))) then 
                canny_edge_rectangle_1_2_U0_ap_ready_count <= std_logic_vector(unsigned(canny_edge_rectangle_1_2_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIS2GrayArray_U0_ap_continue <= ap_const_logic_1;
    AXIS2GrayArray_U0_ap_start <= ((ap_sync_reg_AXIS2GrayArray_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc_U0_ap_continue <= ap_sync_done;
    Block_proc_U0_ap_start <= start_for_Block_proc_U0_empty_n;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    GaussianBlur_U0_ap_continue <= ap_const_logic_1;
    GaussianBlur_U0_ap_start <= start_for_GaussianBlur_U0_empty_n;
    GrayArray2AXIS_U0_ap_continue <= ap_sync_done;
    GrayArray2AXIS_U0_ap_start <= start_for_GrayArray2AXIS_U0_empty_n;
    GrayArray2AXIS_U0_start_full_n <= ap_const_logic_1;
    GrayArray2AXIS_U0_start_write <= ap_const_logic_0;
    HystThresholdComp_U0_ap_continue <= ap_const_logic_1;
    HystThresholdComp_U0_ap_start <= start_for_HystThresholdComp_U0_empty_n;
    HystThreshold_U0_ap_continue <= ap_const_logic_1;
    HystThreshold_U0_ap_start <= start_for_HystThreshold_U0_empty_n;
    NonMaxSuppression_U0_ap_continue <= ap_const_logic_1;
    NonMaxSuppression_U0_ap_start <= start_for_NonMaxSuppression_U0_empty_n;
    Sobel_1920u_1080u_U0_ap_continue <= ap_const_logic_1;
    Sobel_1920u_1080u_U0_ap_start <= start_for_Sobel_1920u_1080u_U0_empty_n;
    ZeroPadding_U0_ap_continue <= ap_const_logic_1;
    ZeroPadding_U0_ap_start <= start_for_ZeroPadding_U0_empty_n;
    ZeroPadding_U0_start_full_n <= ap_const_logic_1;
    ZeroPadding_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (canny_edge_rectangle_2_U0_ap_idle and canny_edge_rectangle_1_2_U0_ap_idle and ZeroPadding_U0_ap_idle and Sobel_1920u_1080u_U0_ap_idle and NonMaxSuppression_U0_ap_idle and HystThreshold_U0_ap_idle and HystThresholdComp_U0_ap_idle and GrayArray2AXIS_U0_ap_idle and GaussianBlur_U0_ap_idle and Block_proc_U0_ap_idle and AXIS2GrayArray_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIS2GrayArray_U0_ap_ready <= (ap_sync_reg_AXIS2GrayArray_U0_ap_ready or AXIS2GrayArray_U0_ap_ready);
    ap_sync_canny_edge_rectangle_1_2_U0_ap_ready <= (canny_edge_rectangle_1_2_U0_ap_ready or ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (GrayArray2AXIS_U0_ap_done and Block_proc_U0_ap_done);
    ap_sync_ready <= (ap_sync_canny_edge_rectangle_1_2_U0_ap_ready and ap_sync_AXIS2GrayArray_U0_ap_ready);
    axis_in_TREADY <= AXIS2GrayArray_U0_axis_in_TREADY;
    axis_out_TDATA <= GrayArray2AXIS_U0_axis_out_TDATA;
    axis_out_TLAST <= GrayArray2AXIS_U0_axis_out_TLAST;
    axis_out_TVALID <= GrayArray2AXIS_U0_axis_out_TVALID;
    canny_edge_rectangle_1_2_U0_ap_continue <= ap_const_logic_1;
    canny_edge_rectangle_1_2_U0_ap_start <= ((ap_sync_reg_canny_edge_rectangle_1_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    canny_edge_rectangle_2_U0_ap_continue <= ap_const_logic_1;
    canny_edge_rectangle_2_U0_ap_start <= start_for_canny_edge_rectangle_2_U0_empty_n;
    canny_edge_rectangle_2_U0_start_full_n <= (start_for_HystThreshold_U0_full_n and start_for_Block_proc_U0_full_n);
    start_for_Block_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_GaussianBlur_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_GrayArray2AXIS_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_HystThresholdComp_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_HystThreshold_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_NonMaxSuppression_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_1920u_1080u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ZeroPadding_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_canny_edge_rectangle_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
