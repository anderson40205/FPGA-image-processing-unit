-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HystThreshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    hthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    hthr_empty_n : IN STD_LOGIC;
    hthr_read : OUT STD_LOGIC;
    lthr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    lthr_empty_n : IN STD_LOGIC;
    lthr_read : OUT STD_LOGIC;
    fifo5_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    fifo5_empty_n : IN STD_LOGIC;
    fifo5_read : OUT STD_LOGIC;
    fifo6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo6_full_n : IN STD_LOGIC;
    fifo6_write : OUT STD_LOGIC );
end;


architecture behav of HystThreshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal hthr_blk_n : STD_LOGIC;
    signal lthr_blk_n : STD_LOGIC;
    signal fifo5_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln397_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo6_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln397_reg_234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xi_0_i_i_reg_140 : STD_LOGIC_VECTOR (10 downto 0);
    signal hthr_read_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal lthr_read_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln396_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal yi_fu_157_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal yi_reg_229 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln397_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xi_fu_169_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln404_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln404_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal yi_0_i_i_reg_129 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln404_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln404_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln404_fu_190_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln404_1_fu_202_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln396_fu_151_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln396_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln396_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xi_0_i_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln396_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                xi_0_i_i_reg_140 <= ap_const_lv11_0;
            elsif (((icmp_ln397_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                xi_0_i_i_reg_140 <= xi_fu_169_p2;
            end if; 
        end if;
    end process;

    yi_0_i_i_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                yi_0_i_i_reg_129 <= yi_reg_229;
            elsif ((not(((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yi_0_i_i_reg_129 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                hthr_read_reg_215 <= hthr_dout;
                lthr_read_reg_220 <= lthr_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln397_reg_234 <= icmp_ln397_fu_163_p2;
                icmp_ln397_reg_234_pp0_iter1_reg <= icmp_ln397_reg_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_reg_234 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln404_reg_243 <= icmp_ln404_fu_175_p2;
                icmp_ln407_reg_249 <= icmp_ln407_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                yi_reg_229 <= yi_fu_157_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, hthr_empty_n, lthr_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln396_fu_151_p2, ap_CS_fsm_state2, icmp_ln397_fu_163_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln396_fu_151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln397_fu_163_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln397_fu_163_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo5_empty_n, fifo6_full_n, ap_enable_reg_pp0_iter1, icmp_ln397_reg_234, ap_enable_reg_pp0_iter2, icmp_ln397_reg_234_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (fifo6_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln397_reg_234 = ap_const_lv1_0) and (fifo5_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo5_empty_n, fifo6_full_n, ap_enable_reg_pp0_iter1, icmp_ln397_reg_234, ap_enable_reg_pp0_iter2, icmp_ln397_reg_234_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (fifo6_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln397_reg_234 = ap_const_lv1_0) and (fifo5_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo5_empty_n, fifo6_full_n, ap_enable_reg_pp0_iter1, icmp_ln397_reg_234, ap_enable_reg_pp0_iter2, icmp_ln397_reg_234_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (fifo6_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln397_reg_234 = ap_const_lv1_0) and (fifo5_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, hthr_empty_n, lthr_empty_n)
    begin
                ap_block_state1 <= ((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(fifo5_empty_n, icmp_ln397_reg_234)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln397_reg_234 = ap_const_lv1_0) and (fifo5_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(fifo6_full_n, icmp_ln397_reg_234_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (fifo6_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln397_fu_163_p2)
    begin
        if ((icmp_ln397_fu_163_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln396_fu_151_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln396_fu_151_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fifo5_blk_n_assign_proc : process(fifo5_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln397_reg_234)
    begin
        if (((icmp_ln397_reg_234 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo5_blk_n <= fifo5_empty_n;
        else 
            fifo5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo5_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln397_reg_234, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln397_reg_234 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo5_read <= ap_const_logic_1;
        else 
            fifo5_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo6_blk_n_assign_proc : process(fifo6_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln397_reg_234_pp0_iter1_reg)
    begin
        if (((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            fifo6_blk_n <= fifo6_full_n;
        else 
            fifo6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        fifo6_din <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln404_1_fu_202_p3),8));


    fifo6_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln397_reg_234_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln397_reg_234_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo6_write <= ap_const_logic_1;
        else 
            fifo6_write <= ap_const_logic_0;
        end if; 
    end process;


    hthr_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hthr_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hthr_blk_n <= hthr_empty_n;
        else 
            hthr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hthr_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hthr_empty_n, lthr_empty_n)
    begin
        if ((not(((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hthr_read <= ap_const_logic_1;
        else 
            hthr_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln396_fu_151_p2 <= "1" when (yi_0_i_i_reg_129 = ap_const_lv11_438) else "0";
    icmp_ln397_fu_163_p2 <= "1" when (xi_0_i_i_reg_140 = ap_const_lv11_780) else "0";
    icmp_ln404_fu_175_p2 <= "1" when (unsigned(fifo5_dout) < unsigned(lthr_read_reg_220)) else "0";
    icmp_ln407_fu_180_p2 <= "1" when (unsigned(fifo5_dout) > unsigned(hthr_read_reg_215)) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln396_fu_151_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln396_fu_151_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lthr_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, lthr_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lthr_blk_n <= lthr_empty_n;
        else 
            lthr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lthr_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, hthr_empty_n, lthr_empty_n)
    begin
        if ((not(((lthr_empty_n = ap_const_logic_0) or (hthr_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lthr_read <= ap_const_logic_1;
        else 
            lthr_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln404_fu_198_p2 <= (icmp_ln407_reg_249 or icmp_ln404_reg_243);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln404_1_fu_202_p3 <= 
        select_ln404_fu_190_p3 when (or_ln404_fu_198_p2(0) = '1') else 
        ap_const_lv2_1;
    select_ln404_fu_190_p3 <= 
        ap_const_lv2_3 when (xor_ln404_fu_185_p2(0) = '1') else 
        ap_const_lv2_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xi_fu_169_p2 <= std_logic_vector(unsigned(xi_0_i_i_reg_140) + unsigned(ap_const_lv11_1));
    xor_ln404_fu_185_p2 <= (icmp_ln404_reg_243 xor ap_const_lv1_1);
    yi_fu_157_p2 <= std_logic_vector(unsigned(yi_0_i_i_reg_129) + unsigned(ap_const_lv11_1));
end behav;
